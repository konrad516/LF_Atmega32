
LF_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000996  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00000996  00000a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000a8  008000a8  00000a72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001149  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af3  00000000  00000000  00001d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a5c  00000000  00000000  00002864  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000032c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e7  00000000  00000000  00003528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ef  00000000  00000000  00003a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003ffe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_10>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_13>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	ea 00       	.word	0x00ea	; ????
  56:	f5 00       	.word	0x00f5	; ????
  58:	04 01       	movw	r0, r8
  5a:	18 01       	movw	r2, r16
  5c:	2c 01       	movw	r4, r24
  5e:	40 01       	movw	r8, r0
  60:	54 01       	movw	r10, r8
  62:	68 01       	movw	r12, r16

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e6 e9       	ldi	r30, 0x96	; 150
  78:	f9 e0       	ldi	r31, 0x09	; 9
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a8 3a       	cpi	r26, 0xA8	; 168
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a8 ea       	ldi	r26, 0xA8	; 168
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a2 3c       	cpi	r26, 0xC2	; 194
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  9a:	0c 94 c9 04 	jmp	0x992	; 0x992 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <init>:
#include <avr/interrupt.h>

void init()
{
	//H BRIDGE
	DDRD=0b00111111;
  a2:	8f e3       	ldi	r24, 0x3F	; 63
  a4:	81 bb       	out	0x11, r24	; 17
	
	E1_AIN=0; // PORTD &= ~(1<<PD3);
  a6:	93 98       	cbi	0x12, 3	; 18
	E1_BIN=0;
  a8:	92 98       	cbi	0x12, 2	; 18
	E2_AIN=0;
  aa:	96 98       	cbi	0x12, 6	; 18
	E2_BIN=0;
  ac:	97 98       	cbi	0x12, 7	; 18
	PWM1=0;
  ae:	94 98       	cbi	0x12, 4	; 18
	PWM2=0;
  b0:	95 98       	cbi	0x12, 5	; 18
	
	//LEDS
	DDRB=0xF0;
  b2:	80 ef       	ldi	r24, 0xF0	; 240
  b4:	87 bb       	out	0x17, r24	; 23
	DDRC=0x0F;
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	84 bb       	out	0x14, r24	; 20
  ba:	08 95       	ret

000000bc <ADC_init>:
}

void ADC_init()
{
	ADMUX |= (1<<REFS0); //Vol reference: AVCC with external capacitor at AREF pin
  bc:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= (1<<ADLAR); //8bit ADCH
  be:	3d 9a       	sbi	0x07, 5	; 7
	ADCSRA |= (1<<ADEN); //ADC Enable
  c0:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //prescaler 128, 16M/128=125k
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	86 b9       	out	0x06, r24	; 6
  c8:	08 95       	ret

000000ca <Timers_init>:
}

void Timers_init()
{
	//timer 1 - PWM
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1); //fast PWM, non inverting mode
  ca:	8f b5       	in	r24, 0x2f	; 47
  cc:	80 6a       	ori	r24, 0xA0	; 160
  ce:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1<<WGM12) | (1<<WGM10); //fast PWM, 8-bit
  d0:	8f b5       	in	r24, 0x2f	; 47
  d2:	89 60       	ori	r24, 0x09	; 9
  d4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS10); //no prescaler
  d6:	8e b5       	in	r24, 0x2e	; 46
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	8e bd       	out	0x2e, r24	; 46
	
	//timer 0 - main loop
	TCCR0 |= (1<<WGM01); //ctc mode
  dc:	83 b7       	in	r24, 0x33	; 51
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<CS02) | (1<<CS00); //preskaler 1024 16M/1024=15625
  e2:	83 b7       	in	r24, 0x33	; 51
  e4:	85 60       	ori	r24, 0x05	; 5
  e6:	83 bf       	out	0x33, r24	; 51
	OCR0=125; // 15625/125=125, main loop 125Hz
  e8:	8d e7       	ldi	r24, 0x7D	; 125
  ea:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1<<OCIE0); //timer0 compare match interrupt enable
  ec:	89 b7       	in	r24, 0x39	; 57
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	89 bf       	out	0x39, r24	; 57
  f2:	08 95       	ret

000000f4 <init_all>:
}

void init_all()
{
	sei(); //enable global interrupt
  f4:	78 94       	sei
	init();
  f6:	0e 94 51 00 	call	0xa2	; 0xa2 <init>
	ADC_init();
  fa:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_init>
	Timers_init();
  fe:	0e 94 65 00 	call	0xca	; 0xca <Timers_init>
 102:	08 95       	ret

00000104 <LF_loop>:
#include "PID.h"


void LF_loop(int start)
{
	if(start)
 104:	89 2b       	or	r24, r25
 106:	d9 f0       	breq	.+54     	; 0x13e <LF_loop+0x3a>
	{
		read_ADC();
 108:	0e 94 3c 02 	call	0x478	; 0x478 <read_ADC>
		leds_ADC();
 10c:	0e 94 84 02 	call	0x508	; 0x508 <leds_ADC>
		err=error();
 110:	0e 94 8c 01 	call	0x318	; 0x318 <error>
 114:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <err+0x1>
 118:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <err>
		int value= PID_calc();
 11c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <PID_calc>
		PWM(V + value, V - value);
 120:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <V>
 124:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <V+0x1>
 128:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <V>
 12c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <V+0x1>
 130:	68 1b       	sub	r22, r24
 132:	79 0b       	sbc	r23, r25
 134:	82 0f       	add	r24, r18
 136:	93 1f       	adc	r25, r19
 138:	0e 94 03 02 	call	0x406	; 0x406 <PWM>
 13c:	08 95       	ret
	}
	else
	{
		stop_engine();
 13e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <stop_engine>
 142:	08 95       	ret

00000144 <main>:

volatile int synch_timer = 0, start=0;

int main(void)
{
		init_all();
 144:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_all>
		USART_init();
 148:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <USART_init>
		
		while(1)
		{
			if(synch_timer)
 14c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <synch_timer>
 150:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <synch_timer+0x1>
 154:	89 2b       	or	r24, r25
 156:	d1 f3       	breq	.-12     	; 0x14c <main+0x8>
			{
				synch_timer=0;
 158:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <synch_timer+0x1>
 15c:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <synch_timer>
				LF_loop(start);
 160:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
 164:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__data_end+0x1>
 168:	0e 94 82 00 	call	0x104	; 0x104 <LF_loop>
 16c:	ef cf       	rjmp	.-34     	; 0x14c <main+0x8>

0000016e <__vector_10>:
		}
}


ISR(TIMER0_COMP_vect)
{
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
	synch_timer=1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <synch_timer+0x1>
 184:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <synch_timer>
}
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_13>:

ISR(USART_RXC_vect)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	char data;
	data = UDR;
 1b8:	ec b1       	in	r30, 0x0c	; 12
	UDR = data;
 1ba:	ec b9       	out	0x0c, r30	; 12
	
	switch(data)
 1bc:	8e 2f       	mov	r24, r30
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	f1 97       	sbiw	r30, 0x31	; 49
 1c4:	e8 30       	cpi	r30, 0x08	; 8
 1c6:	f1 05       	cpc	r31, r1
 1c8:	08 f0       	brcs	.+2      	; 0x1cc <__vector_13+0x36>
 1ca:	95 c0       	rjmp	.+298    	; 0x2f6 <__vector_13+0x160>
 1cc:	e6 5d       	subi	r30, 0xD6	; 214
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__tablejump2__>
	{
		case '1':
		start ^=1;
 1d4:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
 1d8:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__data_end+0x1>
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	82 27       	eor	r24, r18
 1e0:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__data_end+0x1>
 1e4:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end>
		break;
 1e8:	86 c0       	rjmp	.+268    	; 0x2f6 <__vector_13+0x160>
		
		case '2':
		calibration();
 1ea:	0e 94 62 02 	call	0x4c4	; 0x4c4 <calibration>
		usart_put_string("\nSensors point: ");
 1ee:	86 e8       	ldi	r24, 0x86	; 134
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 ed 02 	call	0x5da	; 0x5da <usart_put_string>
		usart_send_value(point);
 1f6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <point>
 1fa:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <point+0x1>
 1fe:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <usart_send_value>
		leds_effect();
 202:	0e 94 b2 02 	call	0x564	; 0x564 <leds_effect>
		break;
 206:	77 c0       	rjmp	.+238    	; 0x2f6 <__vector_13+0x160>
		
		case '3':
		kp+=1;
 208:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <kp>
 20c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <kp+0x1>
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <kp+0x1>
 216:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <kp>
		usart_put_string("\nKp: ");
 21a:	87 e9       	ldi	r24, 0x97	; 151
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 ed 02 	call	0x5da	; 0x5da <usart_put_string>
		usart_send_value(kp);
 222:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <kp>
 226:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <kp+0x1>
 22a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <usart_send_value>
		break;
 22e:	63 c0       	rjmp	.+198    	; 0x2f6 <__vector_13+0x160>
		
		case '4':
		kp-=1;
 230:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <kp>
 234:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <kp+0x1>
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <kp+0x1>
 23e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <kp>
		usart_put_string("\nKp: ");
 242:	87 e9       	ldi	r24, 0x97	; 151
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 ed 02 	call	0x5da	; 0x5da <usart_put_string>
		usart_send_value(kp);
 24a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <kp>
 24e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <kp+0x1>
 252:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <usart_send_value>
		break;
 256:	4f c0       	rjmp	.+158    	; 0x2f6 <__vector_13+0x160>
		
		case '5':
		kd+=1;
 258:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <kd>
 25c:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <kd+0x1>
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <kd+0x1>
 266:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <kd>
		usart_put_string("\nKd: ");
 26a:	8d e9       	ldi	r24, 0x9D	; 157
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 ed 02 	call	0x5da	; 0x5da <usart_put_string>
		usart_send_value(kd);
 272:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <kd>
 276:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <kd+0x1>
 27a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <usart_send_value>
		break;
 27e:	3b c0       	rjmp	.+118    	; 0x2f6 <__vector_13+0x160>
		
		case '6':
		kd-=1;
 280:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <kd>
 284:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <kd+0x1>
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <kd+0x1>
 28e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <kd>
		usart_put_string("\nKd: ");
 292:	8d e9       	ldi	r24, 0x9D	; 157
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 ed 02 	call	0x5da	; 0x5da <usart_put_string>
		usart_send_value(kd);
 29a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <kd>
 29e:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <kd+0x1>
 2a2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <usart_send_value>
		break;
 2a6:	27 c0       	rjmp	.+78     	; 0x2f6 <__vector_13+0x160>
		
		case '7':
		V+=5;
 2a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <V>
 2ac:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <V+0x1>
 2b0:	05 96       	adiw	r24, 0x05	; 5
 2b2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <V+0x1>
 2b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <V>
		usart_put_string("\nV: ");
 2ba:	83 ea       	ldi	r24, 0xA3	; 163
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 ed 02 	call	0x5da	; 0x5da <usart_put_string>
		usart_send_value(V);
 2c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <V>
 2c6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <V+0x1>
 2ca:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <usart_send_value>
		break;
 2ce:	13 c0       	rjmp	.+38     	; 0x2f6 <__vector_13+0x160>
		
		case '8':
		V-=5;
 2d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <V>
 2d4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <V+0x1>
 2d8:	05 97       	sbiw	r24, 0x05	; 5
 2da:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <V+0x1>
 2de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <V>
		usart_put_string("\nV: ");
 2e2:	83 ea       	ldi	r24, 0xA3	; 163
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 ed 02 	call	0x5da	; 0x5da <usart_put_string>
		usart_send_value(V);
 2ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <V>
 2ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <V+0x1>
 2f2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <usart_send_value>
		break;
		
		
	}
	
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <error>:
volatile int V=100;

int e_last=0, err=0;

int error()
{
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
 328:	60 97       	sbiw	r28, 0x10	; 16
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
	int e=0;
	int e_last=0;
	int counter=0;
	int sensors_value[8]={-12,-8,-4,-1,1,4,8,12};
 334:	80 e1       	ldi	r24, 0x10	; 16
 336:	e6 e7       	ldi	r30, 0x76	; 118
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	de 01       	movw	r26, r28
 33c:	11 96       	adiw	r26, 0x01	; 1
 33e:	01 90       	ld	r0, Z+
 340:	0d 92       	st	X+, r0
 342:	8a 95       	dec	r24
 344:	e1 f7       	brne	.-8      	; 0x33e <error+0x26>
 346:	e2 eb       	ldi	r30, 0xB2	; 178
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	de 01       	movw	r26, r28
 34c:	11 96       	adiw	r26, 0x01	; 1
 34e:	0f 2e       	mov	r0, r31
 350:	f2 ec       	ldi	r31, 0xC2	; 194
 352:	ef 2e       	mov	r14, r31
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	ff 2e       	mov	r15, r31
 358:	f0 2d       	mov	r31, r0

int error()
{
	int e=0;
	int e_last=0;
	int counter=0;
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	70 e0       	ldi	r23, 0x00	; 0

int e_last=0, err=0;

int error()
{
	int e=0;
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
	int counter=0;
	int sensors_value[8]={-12,-8,-4,-1,1,4,8,12};
		
	for (int i=0; i<8; i++)
	{
		e+=sensors[i]*sensors_value[i];		
 362:	01 91       	ld	r16, Z+
 364:	11 91       	ld	r17, Z+
 366:	2d 91       	ld	r18, X+
 368:	3d 91       	ld	r19, X+
 36a:	02 9f       	mul	r16, r18
 36c:	a0 01       	movw	r20, r0
 36e:	03 9f       	mul	r16, r19
 370:	50 0d       	add	r21, r0
 372:	12 9f       	mul	r17, r18
 374:	50 0d       	add	r21, r0
 376:	11 24       	eor	r1, r1
 378:	84 0f       	add	r24, r20
 37a:	95 1f       	adc	r25, r21
		counter += sensors_value[i];		//how many sensors read line
 37c:	62 0f       	add	r22, r18
 37e:	73 1f       	adc	r23, r19
	int e=0;
	int e_last=0;
	int counter=0;
	int sensors_value[8]={-12,-8,-4,-1,1,4,8,12};
		
	for (int i=0; i<8; i++)
 380:	ee 15       	cp	r30, r14
 382:	ff 05       	cpc	r31, r15
 384:	71 f7       	brne	.-36     	; 0x362 <error+0x4a>
	{
		e+=sensors[i]*sensors_value[i];		
		counter += sensors_value[i];		//how many sensors read line
	}
	
	if(counter>0) 
 386:	16 16       	cp	r1, r22
 388:	17 06       	cpc	r1, r23
 38a:	1c f4       	brge	.+6      	; 0x392 <error+0x7a>
	{
		e=e/counter;	//average error
 38c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__divmodhi4>
 390:	cb 01       	movw	r24, r22
		if(e_last>9) e=20;
		else if (e_last<-9) e=-20;
		else e_last=e;
	}
	return e;
}
 392:	60 96       	adiw	r28, 0x10	; 16
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	f8 94       	cli
 398:	de bf       	out	0x3e, r29	; 62
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	cd bf       	out	0x3d, r28	; 61
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	ff 90       	pop	r15
 3a8:	ef 90       	pop	r14
 3aa:	08 95       	ret

000003ac <PID_calc>:

int PID_calc()
{
	int u;
	int err_d;
	err_d=err-e_last;
 3ac:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <err>
 3b0:	30 91 ad 00 	lds	r19, 0x00AD	; 0x8000ad <err+0x1>
 3b4:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <e_last>
 3b8:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <e_last+0x1>
 3bc:	f9 01       	movw	r30, r18
 3be:	e8 1b       	sub	r30, r24
 3c0:	f9 0b       	sbc	r31, r25
	e_last = err;
 3c2:	30 93 af 00 	sts	0x00AF, r19	; 0x8000af <e_last+0x1>
 3c6:	20 93 ae 00 	sts	0x00AE, r18	; 0x8000ae <e_last>
	u = kp*err + kd*err_d;
 3ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <kp>
 3ce:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <kp+0x1>
 3d2:	60 91 b0 00 	lds	r22, 0x00B0	; 0x8000b0 <kd>
 3d6:	70 91 b1 00 	lds	r23, 0x00B1	; 0x8000b1 <kd+0x1>
	return u;
 3da:	28 9f       	mul	r18, r24
 3dc:	a0 01       	movw	r20, r0
 3de:	29 9f       	mul	r18, r25
 3e0:	50 0d       	add	r21, r0
 3e2:	38 9f       	mul	r19, r24
 3e4:	50 0d       	add	r21, r0
 3e6:	11 24       	eor	r1, r1
 3e8:	e6 9f       	mul	r30, r22
 3ea:	c0 01       	movw	r24, r0
 3ec:	e7 9f       	mul	r30, r23
 3ee:	90 0d       	add	r25, r0
 3f0:	f6 9f       	mul	r31, r22
 3f2:	90 0d       	add	r25, r0
 3f4:	11 24       	eor	r1, r1
 3f6:	84 0f       	add	r24, r20
 3f8:	95 1f       	adc	r25, r21
 3fa:	08 95       	ret

000003fc <stop_engine>:
#include <avr/io.h>


void stop_engine()
{
	E1_AIN=0;
 3fc:	93 98       	cbi	0x12, 3	; 18
	E1_BIN=0;
 3fe:	92 98       	cbi	0x12, 2	; 18
	E2_AIN=0;
 400:	96 98       	cbi	0x12, 6	; 18
	E2_BIN=0;
 402:	97 98       	cbi	0x12, 7	; 18
 404:	08 95       	ret

00000406 <PWM>:
}

void PWM(int left, int right)
{
	if (left>=0)
 406:	99 23       	and	r25, r25
 408:	4c f0       	brlt	.+18     	; 0x41c <PWM+0x16>
 40a:	8f 3f       	cpi	r24, 0xFF	; 255
 40c:	91 05       	cpc	r25, r1
 40e:	19 f0       	breq	.+6      	; 0x416 <PWM+0x10>
 410:	14 f0       	brlt	.+4      	; 0x416 <PWM+0x10>
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(left>255)left=255;
		E1_AIN=1;
 416:	93 9a       	sbi	0x12, 3	; 18
		E1_BIN=0;
 418:	92 98       	cbi	0x12, 2	; 18
 41a:	08 c0       	rjmp	.+16     	; 0x42c <PWM+0x26>
	}
	else
	{
		if(left>-255)left=-255;
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	2f ef       	ldi	r18, 0xFF	; 255
 420:	92 07       	cpc	r25, r18
 422:	14 f0       	brlt	.+4      	; 0x428 <PWM+0x22>
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	9f ef       	ldi	r25, 0xFF	; 255
		E1_AIN=0;
 428:	93 98       	cbi	0x12, 3	; 18
		E1_BIN=1;
 42a:	92 9a       	sbi	0x12, 2	; 18
	}
	if (right>=0)
 42c:	77 23       	and	r23, r23
 42e:	4c f0       	brlt	.+18     	; 0x442 <PWM+0x3c>
 430:	6f 3f       	cpi	r22, 0xFF	; 255
 432:	71 05       	cpc	r23, r1
 434:	19 f0       	breq	.+6      	; 0x43c <PWM+0x36>
 436:	14 f0       	brlt	.+4      	; 0x43c <PWM+0x36>
 438:	6f ef       	ldi	r22, 0xFF	; 255
 43a:	70 e0       	ldi	r23, 0x00	; 0
	{
		if(right>255)right=255;
		E2_AIN=1;
 43c:	96 9a       	sbi	0x12, 6	; 18
		E2_BIN=0;
 43e:	97 98       	cbi	0x12, 7	; 18
 440:	08 c0       	rjmp	.+16     	; 0x452 <PWM+0x4c>
	}
	else
	{
		if(right>-255)right=-255;
 442:	62 30       	cpi	r22, 0x02	; 2
 444:	2f ef       	ldi	r18, 0xFF	; 255
 446:	72 07       	cpc	r23, r18
 448:	14 f0       	brlt	.+4      	; 0x44e <PWM+0x48>
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	7f ef       	ldi	r23, 0xFF	; 255
		E2_AIN=0;
 44e:	96 98       	cbi	0x12, 6	; 18
		E2_BIN=1;
 450:	97 9a       	sbi	0x12, 7	; 18
	}
	OCR1A=abs(left);
 452:	9c 01       	movw	r18, r24
 454:	99 23       	and	r25, r25
 456:	24 f4       	brge	.+8      	; 0x460 <PWM+0x5a>
 458:	22 27       	eor	r18, r18
 45a:	33 27       	eor	r19, r19
 45c:	28 1b       	sub	r18, r24
 45e:	39 0b       	sbc	r19, r25
 460:	3b bd       	out	0x2b, r19	; 43
 462:	2a bd       	out	0x2a, r18	; 42
	OCR1B=abs(right);
 464:	cb 01       	movw	r24, r22
 466:	99 23       	and	r25, r25
 468:	24 f4       	brge	.+8      	; 0x472 <PWM+0x6c>
 46a:	88 27       	eor	r24, r24
 46c:	99 27       	eor	r25, r25
 46e:	86 1b       	sub	r24, r22
 470:	97 0b       	sbc	r25, r23
 472:	99 bd       	out	0x29, r25	; 41
 474:	88 bd       	out	0x28, r24	; 40
 476:	08 95       	ret

00000478 <read_ADC>:
int sensors[8];
int tab_sensors[8]={7,6,5,4,3,2,1,0};
volatile int point=150;

void read_ADC()
{
 478:	a6 e6       	ldi	r26, 0x66	; 102
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	e2 eb       	ldi	r30, 0xB2	; 178
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	42 ec       	ldi	r20, 0xC2	; 194
 482:	50 e0       	ldi	r21, 0x00	; 0
	{
		ADMUX &= 0b11100000; //zero mask
		ADMUX |= tab_sensors[i]; //input channel
		ADCSRA |= (1<<ADSC); //start conversion
		while (ADCSRA & (1<<ADSC)){}; //wait for stop conversion
		if (ADCH>point) sensors[i]=1;
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	70 e0       	ldi	r23, 0x00	; 0
void read_ADC()
{
	
	for (uint8_t i=0; i<8; i++)
	{
		ADMUX &= 0b11100000; //zero mask
 488:	87 b1       	in	r24, 0x07	; 7
 48a:	80 7e       	andi	r24, 0xE0	; 224
 48c:	87 b9       	out	0x07, r24	; 7
		ADMUX |= tab_sensors[i]; //input channel
 48e:	97 b1       	in	r25, 0x07	; 7
 490:	8c 91       	ld	r24, X
 492:	12 96       	adiw	r26, 0x02	; 2
 494:	89 2b       	or	r24, r25
 496:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC); //start conversion
 498:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & (1<<ADSC)){}; //wait for stop conversion
 49a:	36 99       	sbic	0x06, 6	; 6
 49c:	fe cf       	rjmp	.-4      	; 0x49a <read_ADC+0x22>
		if (ADCH>point) sensors[i]=1;
 49e:	85 b1       	in	r24, 0x05	; 5
 4a0:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <point>
 4a4:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <point+0x1>
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	28 17       	cp	r18, r24
 4ac:	39 07       	cpc	r19, r25
 4ae:	1c f4       	brge	.+6      	; 0x4b6 <read_ADC+0x3e>
 4b0:	71 83       	std	Z+1, r23	; 0x01
 4b2:	60 83       	st	Z, r22
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <read_ADC+0x42>
		else sensors[i]=0;
 4b6:	11 82       	std	Z+1, r1	; 0x01
 4b8:	10 82       	st	Z, r1
 4ba:	32 96       	adiw	r30, 0x02	; 2
volatile int point=150;

void read_ADC()
{
	
	for (uint8_t i=0; i<8; i++)
 4bc:	e4 17       	cp	r30, r20
 4be:	f5 07       	cpc	r31, r21
 4c0:	19 f7       	brne	.-58     	; 0x488 <read_ADC+0x10>
		ADCSRA |= (1<<ADSC); //start conversion
		while (ADCSRA & (1<<ADSC)){}; //wait for stop conversion
		if (ADCH>point) sensors[i]=1;
		else sensors[i]=0;
	}
}
 4c2:	08 95       	ret

000004c4 <calibration>:
void calibration()
{
	int firstCH; //ADC value of 0 channel
	int secondCH;
	
	ADMUX |= 0 & 0b11100000;	//0 channel ADC
 4c4:	87 b1       	in	r24, 0x07	; 7
 4c6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 4c8:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC)){};
 4ca:	36 99       	sbic	0x06, 6	; 6
 4cc:	fe cf       	rjmp	.-4      	; 0x4ca <calibration+0x6>
	firstCH=ADCH;
 4ce:	65 b1       	in	r22, 0x05	; 5
 4d0:	70 e0       	ldi	r23, 0x00	; 0
	
	ADMUX |= 1 & 0b11100000;	//1 channel ADC
 4d2:	87 b1       	in	r24, 0x07	; 7
 4d4:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 4d6:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC)){};
 4d8:	36 99       	sbic	0x06, 6	; 6
 4da:	fe cf       	rjmp	.-4      	; 0x4d8 <calibration+0x14>
	secondCH=ADCH;
 4dc:	85 b1       	in	r24, 0x05	; 5
	
	point = (firstCH+secondCH)/2.0;
 4de:	68 0f       	add	r22, r24
 4e0:	71 1d       	adc	r23, r1
 4e2:	07 2e       	mov	r0, r23
 4e4:	00 0c       	add	r0, r0
 4e6:	88 0b       	sbc	r24, r24
 4e8:	99 0b       	sbc	r25, r25
 4ea:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__floatsisf>
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	5f e3       	ldi	r21, 0x3F	; 63
 4f6:	0e 94 bf 03 	call	0x77e	; 0x77e <__mulsf3>
 4fa:	0e 94 23 03 	call	0x646	; 0x646 <__fixsfsi>
 4fe:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <point+0x1>
 502:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <point>
 506:	08 95       	ret

00000508 <leds_ADC>:
}

void leds_ADC()
{
	PORTB &= 0xF0;
 508:	88 b3       	in	r24, 0x18	; 24
 50a:	80 7f       	andi	r24, 0xF0	; 240
 50c:	88 bb       	out	0x18, r24	; 24
	PORTC &= 0x0F;
 50e:	85 b3       	in	r24, 0x15	; 21
 510:	8f 70       	andi	r24, 0x0F	; 15
 512:	85 bb       	out	0x15, r24	; 21
 514:	e2 eb       	ldi	r30, 0xB2	; 178
 516:	f0 e0       	ldi	r31, 0x00	; 0
	for (int i=0; i<8; i++)
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(i<4)
 51c:	84 30       	cpi	r24, 0x04	; 4
 51e:	91 05       	cpc	r25, r1
 520:	74 f4       	brge	.+28     	; 0x53e <leds_ADC+0x36>
		{
			PORTC |= (sensors[i] << (i+4));
 522:	65 b3       	in	r22, 0x15	; 21
 524:	20 81       	ld	r18, Z
 526:	31 81       	ldd	r19, Z+1	; 0x01
 528:	ac 01       	movw	r20, r24
 52a:	4c 5f       	subi	r20, 0xFC	; 252
 52c:	5f 4f       	sbci	r21, 0xFF	; 255
 52e:	02 c0       	rjmp	.+4      	; 0x534 <leds_ADC+0x2c>
 530:	22 0f       	add	r18, r18
 532:	33 1f       	adc	r19, r19
 534:	4a 95       	dec	r20
 536:	e2 f7       	brpl	.-8      	; 0x530 <leds_ADC+0x28>
 538:	26 2b       	or	r18, r22
 53a:	25 bb       	out	0x15, r18	; 21
 53c:	0d c0       	rjmp	.+26     	; 0x558 <leds_ADC+0x50>
		}
		else
		{
			PORTB |= (sensors[i] << (i-4));
 53e:	68 b3       	in	r22, 0x18	; 24
 540:	20 81       	ld	r18, Z
 542:	31 81       	ldd	r19, Z+1	; 0x01
 544:	ac 01       	movw	r20, r24
 546:	44 50       	subi	r20, 0x04	; 4
 548:	51 09       	sbc	r21, r1
 54a:	02 c0       	rjmp	.+4      	; 0x550 <leds_ADC+0x48>
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	4a 95       	dec	r20
 552:	e2 f7       	brpl	.-8      	; 0x54c <leds_ADC+0x44>
 554:	26 2b       	or	r18, r22
 556:	28 bb       	out	0x18, r18	; 24

void leds_ADC()
{
	PORTB &= 0xF0;
	PORTC &= 0x0F;
	for (int i=0; i<8; i++)
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	32 96       	adiw	r30, 0x02	; 2
 55c:	88 30       	cpi	r24, 0x08	; 8
 55e:	91 05       	cpc	r25, r1
 560:	e9 f6       	brne	.-70     	; 0x51c <leds_ADC+0x14>
		else
		{
			PORTB |= (sensors[i] << (i-4));
		}
	}
}
 562:	08 95       	ret

00000564 <leds_effect>:

void leds_effect()
{
	PORTB &= 0xF0;
 564:	88 b3       	in	r24, 0x18	; 24
 566:	80 7f       	andi	r24, 0xF0	; 240
 568:	88 bb       	out	0x18, r24	; 24
	PORTC &= 0x0F;
 56a:	85 b3       	in	r24, 0x15	; 21
 56c:	8f 70       	andi	r24, 0x0F	; 15
 56e:	85 bb       	out	0x15, r24	; 21
 570:	23 e0       	ldi	r18, 0x03	; 3
 572:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0; i<3; i++)
	{
		PORTB |= 0x0F;
 574:	88 b3       	in	r24, 0x18	; 24
 576:	8f 60       	ori	r24, 0x0F	; 15
 578:	88 bb       	out	0x18, r24	; 24
		PORTC |= 0xF0;
 57a:	85 b3       	in	r24, 0x15	; 21
 57c:	80 6f       	ori	r24, 0xF0	; 240
 57e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 580:	4f ef       	ldi	r20, 0xFF	; 255
 582:	83 ec       	ldi	r24, 0xC3	; 195
 584:	99 e0       	ldi	r25, 0x09	; 9
 586:	41 50       	subi	r20, 0x01	; 1
 588:	80 40       	sbci	r24, 0x00	; 0
 58a:	90 40       	sbci	r25, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <leds_effect+0x22>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <leds_effect+0x2c>
 590:	00 00       	nop
		_delay_ms(200);
		PORTB &= 0xF0;
 592:	88 b3       	in	r24, 0x18	; 24
 594:	80 7f       	andi	r24, 0xF0	; 240
 596:	88 bb       	out	0x18, r24	; 24
		PORTC &= 0x0F;
 598:	85 b3       	in	r24, 0x15	; 21
 59a:	8f 70       	andi	r24, 0x0F	; 15
 59c:	85 bb       	out	0x15, r24	; 21
 59e:	4f ef       	ldi	r20, 0xFF	; 255
 5a0:	83 ec       	ldi	r24, 0xC3	; 195
 5a2:	99 e0       	ldi	r25, 0x09	; 9
 5a4:	41 50       	subi	r20, 0x01	; 1
 5a6:	80 40       	sbci	r24, 0x00	; 0
 5a8:	90 40       	sbci	r25, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <leds_effect+0x40>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <leds_effect+0x4a>
 5ae:	00 00       	nop
 5b0:	21 50       	subi	r18, 0x01	; 1
 5b2:	31 09       	sbc	r19, r1

void leds_effect()
{
	PORTB &= 0xF0;
	PORTC &= 0x0F;
	for(int i=0; i<3; i++)
 5b4:	f9 f6       	brne	.-66     	; 0x574 <leds_effect+0x10>
		_delay_ms(200);
		PORTB &= 0xF0;
		PORTC &= 0x0F;
		_delay_ms(200);
		}
 5b6:	08 95       	ret

000005b8 <USART_init>:
#define USART_BAUDRATE 9600
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void USART_init()
{
	UCSRB |= (1<<RXEN) | (1<<TXEN) | (1<<RXCIE); //receiver, transmitter, rx interrupt enable
 5b8:	8a b1       	in	r24, 0x0a	; 10
 5ba:	88 69       	ori	r24, 0x98	; 152
 5bc:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0); //data 8bit
 5be:	80 b5       	in	r24, 0x20	; 32
 5c0:	86 68       	ori	r24, 0x86	; 134
 5c2:	80 bd       	out	0x20, r24	; 32
	UBRRL = BAUD_PRESCALE;
 5c4:	87 e6       	ldi	r24, 0x67	; 103
 5c6:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE>>8);
 5c8:	10 bc       	out	0x20, r1	; 32
 5ca:	08 95       	ret

000005cc <usart_put_char>:
}

void usart_put_char(unsigned char c)
{
	while(!(UCSRA &= (1<<UDRE))){}; //wait for empty buffer
 5cc:	9b b1       	in	r25, 0x0b	; 11
 5ce:	90 72       	andi	r25, 0x20	; 32
 5d0:	9b b9       	out	0x0b, r25	; 11
 5d2:	99 23       	and	r25, r25
 5d4:	d9 f3       	breq	.-10     	; 0x5cc <usart_put_char>
	UDR=c;
 5d6:	8c b9       	out	0x0c, r24	; 12
 5d8:	08 95       	ret

000005da <usart_put_string>:
}

void usart_put_string(char *pointer)
{
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	ec 01       	movw	r28, r24
	while (*pointer != 0x00)
 5e0:	88 81       	ld	r24, Y
 5e2:	88 23       	and	r24, r24
 5e4:	31 f0       	breq	.+12     	; 0x5f2 <usart_put_string+0x18>
 5e6:	21 96       	adiw	r28, 0x01	; 1
	{
		usart_put_char(*pointer);
 5e8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <usart_put_char>
	UDR=c;
}

void usart_put_string(char *pointer)
{
	while (*pointer != 0x00)
 5ec:	89 91       	ld	r24, Y+
 5ee:	81 11       	cpse	r24, r1
 5f0:	fb cf       	rjmp	.-10     	; 0x5e8 <usart_put_string+0xe>
	{
		usart_put_char(*pointer);
		pointer++;
	}
}
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <usart_send_value>:

void usart_send_value(int value)
{
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	cd b7       	in	r28, 0x3d	; 61
 5fe:	de b7       	in	r29, 0x3e	; 62
 600:	2a 97       	sbiw	r28, 0x0a	; 10
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	f8 94       	cli
 606:	de bf       	out	0x3e, r29	; 62
 608:	0f be       	out	0x3f, r0	; 63
 60a:	cd bf       	out	0x3d, r28	; 61
	char buffor[10];
	itoa(value,buffor,10);
 60c:	4a e0       	ldi	r20, 0x0A	; 10
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	be 01       	movw	r22, r28
 612:	6f 5f       	subi	r22, 0xFF	; 255
 614:	7f 4f       	sbci	r23, 0xFF	; 255
 616:	0e 94 89 04 	call	0x912	; 0x912 <itoa>
	usart_put_string(buffor);
 61a:	ce 01       	movw	r24, r28
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	0e 94 ed 02 	call	0x5da	; 0x5da <usart_put_string>
	strcpy(buffor,' ');
 622:	60 e2       	ldi	r22, 0x20	; 32
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	ce 01       	movw	r24, r28
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	0e 94 82 04 	call	0x904	; 0x904 <strcpy>
	usart_put_char('\n');
 62e:	8a e0       	ldi	r24, 0x0A	; 10
 630:	0e 94 e6 02 	call	0x5cc	; 0x5cc <usart_put_char>
 634:	2a 96       	adiw	r28, 0x0a	; 10
 636:	0f b6       	in	r0, 0x3f	; 63
 638:	f8 94       	cli
 63a:	de bf       	out	0x3e, r29	; 62
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	cd bf       	out	0x3d, r28	; 61
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <__fixsfsi>:
 646:	0e 94 2a 03 	call	0x654	; 0x654 <__fixunssfsi>
 64a:	68 94       	set
 64c:	b1 11       	cpse	r27, r1
 64e:	0c 94 b9 03 	jmp	0x772	; 0x772 <__fp_szero>
 652:	08 95       	ret

00000654 <__fixunssfsi>:
 654:	0e 94 9e 03 	call	0x73c	; 0x73c <__fp_splitA>
 658:	88 f0       	brcs	.+34     	; 0x67c <__fixunssfsi+0x28>
 65a:	9f 57       	subi	r25, 0x7F	; 127
 65c:	98 f0       	brcs	.+38     	; 0x684 <__fixunssfsi+0x30>
 65e:	b9 2f       	mov	r27, r25
 660:	99 27       	eor	r25, r25
 662:	b7 51       	subi	r27, 0x17	; 23
 664:	b0 f0       	brcs	.+44     	; 0x692 <__fixunssfsi+0x3e>
 666:	e1 f0       	breq	.+56     	; 0x6a0 <__fixunssfsi+0x4c>
 668:	66 0f       	add	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	88 1f       	adc	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	1a f0       	brmi	.+6      	; 0x678 <__fixunssfsi+0x24>
 672:	ba 95       	dec	r27
 674:	c9 f7       	brne	.-14     	; 0x668 <__fixunssfsi+0x14>
 676:	14 c0       	rjmp	.+40     	; 0x6a0 <__fixunssfsi+0x4c>
 678:	b1 30       	cpi	r27, 0x01	; 1
 67a:	91 f0       	breq	.+36     	; 0x6a0 <__fixunssfsi+0x4c>
 67c:	0e 94 b8 03 	call	0x770	; 0x770 <__fp_zero>
 680:	b1 e0       	ldi	r27, 0x01	; 1
 682:	08 95       	ret
 684:	0c 94 b8 03 	jmp	0x770	; 0x770 <__fp_zero>
 688:	67 2f       	mov	r22, r23
 68a:	78 2f       	mov	r23, r24
 68c:	88 27       	eor	r24, r24
 68e:	b8 5f       	subi	r27, 0xF8	; 248
 690:	39 f0       	breq	.+14     	; 0x6a0 <__fixunssfsi+0x4c>
 692:	b9 3f       	cpi	r27, 0xF9	; 249
 694:	cc f3       	brlt	.-14     	; 0x688 <__fixunssfsi+0x34>
 696:	86 95       	lsr	r24
 698:	77 95       	ror	r23
 69a:	67 95       	ror	r22
 69c:	b3 95       	inc	r27
 69e:	d9 f7       	brne	.-10     	; 0x696 <__fixunssfsi+0x42>
 6a0:	3e f4       	brtc	.+14     	; 0x6b0 <__fixunssfsi+0x5c>
 6a2:	90 95       	com	r25
 6a4:	80 95       	com	r24
 6a6:	70 95       	com	r23
 6a8:	61 95       	neg	r22
 6aa:	7f 4f       	sbci	r23, 0xFF	; 255
 6ac:	8f 4f       	sbci	r24, 0xFF	; 255
 6ae:	9f 4f       	sbci	r25, 0xFF	; 255
 6b0:	08 95       	ret

000006b2 <__floatunsisf>:
 6b2:	e8 94       	clt
 6b4:	09 c0       	rjmp	.+18     	; 0x6c8 <__floatsisf+0x12>

000006b6 <__floatsisf>:
 6b6:	97 fb       	bst	r25, 7
 6b8:	3e f4       	brtc	.+14     	; 0x6c8 <__floatsisf+0x12>
 6ba:	90 95       	com	r25
 6bc:	80 95       	com	r24
 6be:	70 95       	com	r23
 6c0:	61 95       	neg	r22
 6c2:	7f 4f       	sbci	r23, 0xFF	; 255
 6c4:	8f 4f       	sbci	r24, 0xFF	; 255
 6c6:	9f 4f       	sbci	r25, 0xFF	; 255
 6c8:	99 23       	and	r25, r25
 6ca:	a9 f0       	breq	.+42     	; 0x6f6 <__floatsisf+0x40>
 6cc:	f9 2f       	mov	r31, r25
 6ce:	96 e9       	ldi	r25, 0x96	; 150
 6d0:	bb 27       	eor	r27, r27
 6d2:	93 95       	inc	r25
 6d4:	f6 95       	lsr	r31
 6d6:	87 95       	ror	r24
 6d8:	77 95       	ror	r23
 6da:	67 95       	ror	r22
 6dc:	b7 95       	ror	r27
 6de:	f1 11       	cpse	r31, r1
 6e0:	f8 cf       	rjmp	.-16     	; 0x6d2 <__floatsisf+0x1c>
 6e2:	fa f4       	brpl	.+62     	; 0x722 <__floatsisf+0x6c>
 6e4:	bb 0f       	add	r27, r27
 6e6:	11 f4       	brne	.+4      	; 0x6ec <__floatsisf+0x36>
 6e8:	60 ff       	sbrs	r22, 0
 6ea:	1b c0       	rjmp	.+54     	; 0x722 <__floatsisf+0x6c>
 6ec:	6f 5f       	subi	r22, 0xFF	; 255
 6ee:	7f 4f       	sbci	r23, 0xFF	; 255
 6f0:	8f 4f       	sbci	r24, 0xFF	; 255
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	16 c0       	rjmp	.+44     	; 0x722 <__floatsisf+0x6c>
 6f6:	88 23       	and	r24, r24
 6f8:	11 f0       	breq	.+4      	; 0x6fe <__floatsisf+0x48>
 6fa:	96 e9       	ldi	r25, 0x96	; 150
 6fc:	11 c0       	rjmp	.+34     	; 0x720 <__floatsisf+0x6a>
 6fe:	77 23       	and	r23, r23
 700:	21 f0       	breq	.+8      	; 0x70a <__floatsisf+0x54>
 702:	9e e8       	ldi	r25, 0x8E	; 142
 704:	87 2f       	mov	r24, r23
 706:	76 2f       	mov	r23, r22
 708:	05 c0       	rjmp	.+10     	; 0x714 <__floatsisf+0x5e>
 70a:	66 23       	and	r22, r22
 70c:	71 f0       	breq	.+28     	; 0x72a <__floatsisf+0x74>
 70e:	96 e8       	ldi	r25, 0x86	; 134
 710:	86 2f       	mov	r24, r22
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	60 e0       	ldi	r22, 0x00	; 0
 716:	2a f0       	brmi	.+10     	; 0x722 <__floatsisf+0x6c>
 718:	9a 95       	dec	r25
 71a:	66 0f       	add	r22, r22
 71c:	77 1f       	adc	r23, r23
 71e:	88 1f       	adc	r24, r24
 720:	da f7       	brpl	.-10     	; 0x718 <__floatsisf+0x62>
 722:	88 0f       	add	r24, r24
 724:	96 95       	lsr	r25
 726:	87 95       	ror	r24
 728:	97 f9       	bld	r25, 7
 72a:	08 95       	ret

0000072c <__fp_split3>:
 72c:	57 fd       	sbrc	r21, 7
 72e:	90 58       	subi	r25, 0x80	; 128
 730:	44 0f       	add	r20, r20
 732:	55 1f       	adc	r21, r21
 734:	59 f0       	breq	.+22     	; 0x74c <__fp_splitA+0x10>
 736:	5f 3f       	cpi	r21, 0xFF	; 255
 738:	71 f0       	breq	.+28     	; 0x756 <__fp_splitA+0x1a>
 73a:	47 95       	ror	r20

0000073c <__fp_splitA>:
 73c:	88 0f       	add	r24, r24
 73e:	97 fb       	bst	r25, 7
 740:	99 1f       	adc	r25, r25
 742:	61 f0       	breq	.+24     	; 0x75c <__fp_splitA+0x20>
 744:	9f 3f       	cpi	r25, 0xFF	; 255
 746:	79 f0       	breq	.+30     	; 0x766 <__fp_splitA+0x2a>
 748:	87 95       	ror	r24
 74a:	08 95       	ret
 74c:	12 16       	cp	r1, r18
 74e:	13 06       	cpc	r1, r19
 750:	14 06       	cpc	r1, r20
 752:	55 1f       	adc	r21, r21
 754:	f2 cf       	rjmp	.-28     	; 0x73a <__fp_split3+0xe>
 756:	46 95       	lsr	r20
 758:	f1 df       	rcall	.-30     	; 0x73c <__fp_splitA>
 75a:	08 c0       	rjmp	.+16     	; 0x76c <__fp_splitA+0x30>
 75c:	16 16       	cp	r1, r22
 75e:	17 06       	cpc	r1, r23
 760:	18 06       	cpc	r1, r24
 762:	99 1f       	adc	r25, r25
 764:	f1 cf       	rjmp	.-30     	; 0x748 <__fp_splitA+0xc>
 766:	86 95       	lsr	r24
 768:	71 05       	cpc	r23, r1
 76a:	61 05       	cpc	r22, r1
 76c:	08 94       	sec
 76e:	08 95       	ret

00000770 <__fp_zero>:
 770:	e8 94       	clt

00000772 <__fp_szero>:
 772:	bb 27       	eor	r27, r27
 774:	66 27       	eor	r22, r22
 776:	77 27       	eor	r23, r23
 778:	cb 01       	movw	r24, r22
 77a:	97 f9       	bld	r25, 7
 77c:	08 95       	ret

0000077e <__mulsf3>:
 77e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__mulsf3x>
 782:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_round>
 786:	0e 94 35 04 	call	0x86a	; 0x86a <__fp_pscA>
 78a:	38 f0       	brcs	.+14     	; 0x79a <__mulsf3+0x1c>
 78c:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_pscB>
 790:	20 f0       	brcs	.+8      	; 0x79a <__mulsf3+0x1c>
 792:	95 23       	and	r25, r21
 794:	11 f0       	breq	.+4      	; 0x79a <__mulsf3+0x1c>
 796:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_inf>
 79a:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_nan>
 79e:	11 24       	eor	r1, r1
 7a0:	0c 94 b9 03 	jmp	0x772	; 0x772 <__fp_szero>

000007a4 <__mulsf3x>:
 7a4:	0e 94 96 03 	call	0x72c	; 0x72c <__fp_split3>
 7a8:	70 f3       	brcs	.-36     	; 0x786 <__mulsf3+0x8>

000007aa <__mulsf3_pse>:
 7aa:	95 9f       	mul	r25, r21
 7ac:	c1 f3       	breq	.-16     	; 0x79e <__mulsf3+0x20>
 7ae:	95 0f       	add	r25, r21
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	55 1f       	adc	r21, r21
 7b4:	62 9f       	mul	r22, r18
 7b6:	f0 01       	movw	r30, r0
 7b8:	72 9f       	mul	r23, r18
 7ba:	bb 27       	eor	r27, r27
 7bc:	f0 0d       	add	r31, r0
 7be:	b1 1d       	adc	r27, r1
 7c0:	63 9f       	mul	r22, r19
 7c2:	aa 27       	eor	r26, r26
 7c4:	f0 0d       	add	r31, r0
 7c6:	b1 1d       	adc	r27, r1
 7c8:	aa 1f       	adc	r26, r26
 7ca:	64 9f       	mul	r22, r20
 7cc:	66 27       	eor	r22, r22
 7ce:	b0 0d       	add	r27, r0
 7d0:	a1 1d       	adc	r26, r1
 7d2:	66 1f       	adc	r22, r22
 7d4:	82 9f       	mul	r24, r18
 7d6:	22 27       	eor	r18, r18
 7d8:	b0 0d       	add	r27, r0
 7da:	a1 1d       	adc	r26, r1
 7dc:	62 1f       	adc	r22, r18
 7de:	73 9f       	mul	r23, r19
 7e0:	b0 0d       	add	r27, r0
 7e2:	a1 1d       	adc	r26, r1
 7e4:	62 1f       	adc	r22, r18
 7e6:	83 9f       	mul	r24, r19
 7e8:	a0 0d       	add	r26, r0
 7ea:	61 1d       	adc	r22, r1
 7ec:	22 1f       	adc	r18, r18
 7ee:	74 9f       	mul	r23, r20
 7f0:	33 27       	eor	r19, r19
 7f2:	a0 0d       	add	r26, r0
 7f4:	61 1d       	adc	r22, r1
 7f6:	23 1f       	adc	r18, r19
 7f8:	84 9f       	mul	r24, r20
 7fa:	60 0d       	add	r22, r0
 7fc:	21 1d       	adc	r18, r1
 7fe:	82 2f       	mov	r24, r18
 800:	76 2f       	mov	r23, r22
 802:	6a 2f       	mov	r22, r26
 804:	11 24       	eor	r1, r1
 806:	9f 57       	subi	r25, 0x7F	; 127
 808:	50 40       	sbci	r21, 0x00	; 0
 80a:	9a f0       	brmi	.+38     	; 0x832 <__mulsf3_pse+0x88>
 80c:	f1 f0       	breq	.+60     	; 0x84a <__mulsf3_pse+0xa0>
 80e:	88 23       	and	r24, r24
 810:	4a f0       	brmi	.+18     	; 0x824 <__mulsf3_pse+0x7a>
 812:	ee 0f       	add	r30, r30
 814:	ff 1f       	adc	r31, r31
 816:	bb 1f       	adc	r27, r27
 818:	66 1f       	adc	r22, r22
 81a:	77 1f       	adc	r23, r23
 81c:	88 1f       	adc	r24, r24
 81e:	91 50       	subi	r25, 0x01	; 1
 820:	50 40       	sbci	r21, 0x00	; 0
 822:	a9 f7       	brne	.-22     	; 0x80e <__mulsf3_pse+0x64>
 824:	9e 3f       	cpi	r25, 0xFE	; 254
 826:	51 05       	cpc	r21, r1
 828:	80 f0       	brcs	.+32     	; 0x84a <__mulsf3_pse+0xa0>
 82a:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_inf>
 82e:	0c 94 b9 03 	jmp	0x772	; 0x772 <__fp_szero>
 832:	5f 3f       	cpi	r21, 0xFF	; 255
 834:	e4 f3       	brlt	.-8      	; 0x82e <__mulsf3_pse+0x84>
 836:	98 3e       	cpi	r25, 0xE8	; 232
 838:	d4 f3       	brlt	.-12     	; 0x82e <__mulsf3_pse+0x84>
 83a:	86 95       	lsr	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b7 95       	ror	r27
 842:	f7 95       	ror	r31
 844:	e7 95       	ror	r30
 846:	9f 5f       	subi	r25, 0xFF	; 255
 848:	c1 f7       	brne	.-16     	; 0x83a <__mulsf3_pse+0x90>
 84a:	fe 2b       	or	r31, r30
 84c:	88 0f       	add	r24, r24
 84e:	91 1d       	adc	r25, r1
 850:	96 95       	lsr	r25
 852:	87 95       	ror	r24
 854:	97 f9       	bld	r25, 7
 856:	08 95       	ret

00000858 <__fp_inf>:
 858:	97 f9       	bld	r25, 7
 85a:	9f 67       	ori	r25, 0x7F	; 127
 85c:	80 e8       	ldi	r24, 0x80	; 128
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	08 95       	ret

00000864 <__fp_nan>:
 864:	9f ef       	ldi	r25, 0xFF	; 255
 866:	80 ec       	ldi	r24, 0xC0	; 192
 868:	08 95       	ret

0000086a <__fp_pscA>:
 86a:	00 24       	eor	r0, r0
 86c:	0a 94       	dec	r0
 86e:	16 16       	cp	r1, r22
 870:	17 06       	cpc	r1, r23
 872:	18 06       	cpc	r1, r24
 874:	09 06       	cpc	r0, r25
 876:	08 95       	ret

00000878 <__fp_pscB>:
 878:	00 24       	eor	r0, r0
 87a:	0a 94       	dec	r0
 87c:	12 16       	cp	r1, r18
 87e:	13 06       	cpc	r1, r19
 880:	14 06       	cpc	r1, r20
 882:	05 06       	cpc	r0, r21
 884:	08 95       	ret

00000886 <__fp_round>:
 886:	09 2e       	mov	r0, r25
 888:	03 94       	inc	r0
 88a:	00 0c       	add	r0, r0
 88c:	11 f4       	brne	.+4      	; 0x892 <__fp_round+0xc>
 88e:	88 23       	and	r24, r24
 890:	52 f0       	brmi	.+20     	; 0x8a6 <__fp_round+0x20>
 892:	bb 0f       	add	r27, r27
 894:	40 f4       	brcc	.+16     	; 0x8a6 <__fp_round+0x20>
 896:	bf 2b       	or	r27, r31
 898:	11 f4       	brne	.+4      	; 0x89e <__fp_round+0x18>
 89a:	60 ff       	sbrs	r22, 0
 89c:	04 c0       	rjmp	.+8      	; 0x8a6 <__fp_round+0x20>
 89e:	6f 5f       	subi	r22, 0xFF	; 255
 8a0:	7f 4f       	sbci	r23, 0xFF	; 255
 8a2:	8f 4f       	sbci	r24, 0xFF	; 255
 8a4:	9f 4f       	sbci	r25, 0xFF	; 255
 8a6:	08 95       	ret

000008a8 <__divmodhi4>:
 8a8:	97 fb       	bst	r25, 7
 8aa:	07 2e       	mov	r0, r23
 8ac:	16 f4       	brtc	.+4      	; 0x8b2 <__divmodhi4+0xa>
 8ae:	00 94       	com	r0
 8b0:	07 d0       	rcall	.+14     	; 0x8c0 <__divmodhi4_neg1>
 8b2:	77 fd       	sbrc	r23, 7
 8b4:	09 d0       	rcall	.+18     	; 0x8c8 <__divmodhi4_neg2>
 8b6:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__udivmodhi4>
 8ba:	07 fc       	sbrc	r0, 7
 8bc:	05 d0       	rcall	.+10     	; 0x8c8 <__divmodhi4_neg2>
 8be:	3e f4       	brtc	.+14     	; 0x8ce <__divmodhi4_exit>

000008c0 <__divmodhi4_neg1>:
 8c0:	90 95       	com	r25
 8c2:	81 95       	neg	r24
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__divmodhi4_neg2>:
 8c8:	70 95       	com	r23
 8ca:	61 95       	neg	r22
 8cc:	7f 4f       	sbci	r23, 0xFF	; 255

000008ce <__divmodhi4_exit>:
 8ce:	08 95       	ret

000008d0 <__tablejump2__>:
 8d0:	ee 0f       	add	r30, r30
 8d2:	ff 1f       	adc	r31, r31
 8d4:	05 90       	lpm	r0, Z+
 8d6:	f4 91       	lpm	r31, Z
 8d8:	e0 2d       	mov	r30, r0
 8da:	09 94       	ijmp

000008dc <__udivmodhi4>:
 8dc:	aa 1b       	sub	r26, r26
 8de:	bb 1b       	sub	r27, r27
 8e0:	51 e1       	ldi	r21, 0x11	; 17
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <__udivmodhi4_ep>

000008e4 <__udivmodhi4_loop>:
 8e4:	aa 1f       	adc	r26, r26
 8e6:	bb 1f       	adc	r27, r27
 8e8:	a6 17       	cp	r26, r22
 8ea:	b7 07       	cpc	r27, r23
 8ec:	10 f0       	brcs	.+4      	; 0x8f2 <__udivmodhi4_ep>
 8ee:	a6 1b       	sub	r26, r22
 8f0:	b7 0b       	sbc	r27, r23

000008f2 <__udivmodhi4_ep>:
 8f2:	88 1f       	adc	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	5a 95       	dec	r21
 8f8:	a9 f7       	brne	.-22     	; 0x8e4 <__udivmodhi4_loop>
 8fa:	80 95       	com	r24
 8fc:	90 95       	com	r25
 8fe:	bc 01       	movw	r22, r24
 900:	cd 01       	movw	r24, r26
 902:	08 95       	ret

00000904 <strcpy>:
 904:	fb 01       	movw	r30, r22
 906:	dc 01       	movw	r26, r24
 908:	01 90       	ld	r0, Z+
 90a:	0d 92       	st	X+, r0
 90c:	00 20       	and	r0, r0
 90e:	e1 f7       	brne	.-8      	; 0x908 <strcpy+0x4>
 910:	08 95       	ret

00000912 <itoa>:
 912:	45 32       	cpi	r20, 0x25	; 37
 914:	51 05       	cpc	r21, r1
 916:	20 f4       	brcc	.+8      	; 0x920 <itoa+0xe>
 918:	42 30       	cpi	r20, 0x02	; 2
 91a:	10 f0       	brcs	.+4      	; 0x920 <itoa+0xe>
 91c:	0c 94 94 04 	jmp	0x928	; 0x928 <__itoa_ncheck>
 920:	fb 01       	movw	r30, r22
 922:	10 82       	st	Z, r1
 924:	cb 01       	movw	r24, r22
 926:	08 95       	ret

00000928 <__itoa_ncheck>:
 928:	bb 27       	eor	r27, r27
 92a:	4a 30       	cpi	r20, 0x0A	; 10
 92c:	31 f4       	brne	.+12     	; 0x93a <__itoa_ncheck+0x12>
 92e:	99 23       	and	r25, r25
 930:	22 f4       	brpl	.+8      	; 0x93a <__itoa_ncheck+0x12>
 932:	bd e2       	ldi	r27, 0x2D	; 45
 934:	90 95       	com	r25
 936:	81 95       	neg	r24
 938:	9f 4f       	sbci	r25, 0xFF	; 255
 93a:	0c 94 a0 04 	jmp	0x940	; 0x940 <__utoa_common>

0000093e <__utoa_ncheck>:
 93e:	bb 27       	eor	r27, r27

00000940 <__utoa_common>:
 940:	fb 01       	movw	r30, r22
 942:	55 27       	eor	r21, r21
 944:	aa 27       	eor	r26, r26
 946:	88 0f       	add	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	aa 1f       	adc	r26, r26
 94c:	a4 17       	cp	r26, r20
 94e:	10 f0       	brcs	.+4      	; 0x954 <__utoa_common+0x14>
 950:	a4 1b       	sub	r26, r20
 952:	83 95       	inc	r24
 954:	50 51       	subi	r21, 0x10	; 16
 956:	b9 f7       	brne	.-18     	; 0x946 <__utoa_common+0x6>
 958:	a0 5d       	subi	r26, 0xD0	; 208
 95a:	aa 33       	cpi	r26, 0x3A	; 58
 95c:	08 f0       	brcs	.+2      	; 0x960 <__utoa_common+0x20>
 95e:	a9 5d       	subi	r26, 0xD9	; 217
 960:	a1 93       	st	Z+, r26
 962:	00 97       	sbiw	r24, 0x00	; 0
 964:	79 f7       	brne	.-34     	; 0x944 <__utoa_common+0x4>
 966:	b1 11       	cpse	r27, r1
 968:	b1 93       	st	Z+, r27
 96a:	11 92       	st	Z+, r1
 96c:	cb 01       	movw	r24, r22
 96e:	0c 94 b9 04 	jmp	0x972	; 0x972 <strrev>

00000972 <strrev>:
 972:	dc 01       	movw	r26, r24
 974:	fc 01       	movw	r30, r24
 976:	67 2f       	mov	r22, r23
 978:	71 91       	ld	r23, Z+
 97a:	77 23       	and	r23, r23
 97c:	e1 f7       	brne	.-8      	; 0x976 <strrev+0x4>
 97e:	32 97       	sbiw	r30, 0x02	; 2
 980:	04 c0       	rjmp	.+8      	; 0x98a <strrev+0x18>
 982:	7c 91       	ld	r23, X
 984:	6d 93       	st	X+, r22
 986:	70 83       	st	Z, r23
 988:	62 91       	ld	r22, -Z
 98a:	ae 17       	cp	r26, r30
 98c:	bf 07       	cpc	r27, r31
 98e:	c8 f3       	brcs	.-14     	; 0x982 <strrev+0x10>
 990:	08 95       	ret

00000992 <_exit>:
 992:	f8 94       	cli

00000994 <__stop_program>:
 994:	ff cf       	rjmp	.-2      	; 0x994 <__stop_program>
