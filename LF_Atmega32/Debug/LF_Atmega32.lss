
LF_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000906  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00000906  0000099a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000a8  008000a8  000009e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c2  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af3  00000000  00000000  00001c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0e  00000000  00000000  0000274d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  0000315c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e6  00000000  00000000  000033d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b9  00000000  00000000  000038b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003e6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ea       	ldi	r26, 0xA8	; 168
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3c       	cpi	r26, 0xC2	; 194
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  8a:	0c 94 81 04 	jmp	0x902	; 0x902 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init>:
#include <avr/interrupt.h>

void init()
{
	//H BRIDGE
	DDRD=0b00111111;
  92:	8f e3       	ldi	r24, 0x3F	; 63
  94:	81 bb       	out	0x11, r24	; 17
	
	E1_AIN=0; // PORTD &= ~(1<<PD3);
  96:	93 98       	cbi	0x12, 3	; 18
	E1_BIN=0;
  98:	92 98       	cbi	0x12, 2	; 18
	E2_AIN=0;
  9a:	96 98       	cbi	0x12, 6	; 18
	E2_BIN=0;
  9c:	97 98       	cbi	0x12, 7	; 18
	PWM1=0;
  9e:	94 98       	cbi	0x12, 4	; 18
	PWM2=0;
  a0:	95 98       	cbi	0x12, 5	; 18
	
	//LEDS
	DDRB=0xF0;
  a2:	80 ef       	ldi	r24, 0xF0	; 240
  a4:	87 bb       	out	0x17, r24	; 23
	DDRC=0x0F;
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	84 bb       	out	0x14, r24	; 20
  aa:	08 95       	ret

000000ac <ADC_init>:
}

void ADC_init()
{
	ADMUX |= (1<<REFS0); //Vol reference: AVCC with external capacitor at AREF pin
  ac:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= (1<<ADLAR); //8bit ADCH
  ae:	3d 9a       	sbi	0x07, 5	; 7
	ADCSRA |= (1<<ADEN); //ADC Enable
  b0:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //prescaler 128, 16M/128=125k
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	87 60       	ori	r24, 0x07	; 7
  b6:	86 b9       	out	0x06, r24	; 6
  b8:	08 95       	ret

000000ba <Timers_init>:
}

void Timers_init()
{
	//timer 1 - PWM
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1); //fast PWM, non inverting mode
  ba:	8f b5       	in	r24, 0x2f	; 47
  bc:	80 6a       	ori	r24, 0xA0	; 160
  be:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1<<WGM12) | (1<<WGM10); //fast PWM, 8-bit
  c0:	8f b5       	in	r24, 0x2f	; 47
  c2:	89 60       	ori	r24, 0x09	; 9
  c4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS10); //no prescaler
  c6:	8e b5       	in	r24, 0x2e	; 46
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8e bd       	out	0x2e, r24	; 46
	
	//timer 0 - main loop
	TCCR0 |= (1<<WGM01); //ctc mode
  cc:	83 b7       	in	r24, 0x33	; 51
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<CS02) | (1<<CS00); //preskaler 1024 16M/1024=15625
  d2:	83 b7       	in	r24, 0x33	; 51
  d4:	85 60       	ori	r24, 0x05	; 5
  d6:	83 bf       	out	0x33, r24	; 51
	OCR0=125; // 15625/125=125, main loop 125Hz
  d8:	8d e7       	ldi	r24, 0x7D	; 125
  da:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1<<OCIE0); //timer0 compare match interrupt enable
  dc:	89 b7       	in	r24, 0x39	; 57
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	89 bf       	out	0x39, r24	; 57
  e2:	08 95       	ret

000000e4 <init_all>:
}

void init_all()
{
	sei(); //enable global interrupt
  e4:	78 94       	sei
	init();
  e6:	0e 94 49 00 	call	0x92	; 0x92 <init>
	ADC_init();
  ea:	0e 94 56 00 	call	0xac	; 0xac <ADC_init>
	Timers_init();
  ee:	0e 94 5d 00 	call	0xba	; 0xba <Timers_init>
  f2:	08 95       	ret

000000f4 <LF_loop>:
#include "PID.h"


void LF_loop(int start)
{
	if(start)
  f4:	89 2b       	or	r24, r25
  f6:	d9 f0       	breq	.+54     	; 0x12e <LF_loop+0x3a>
	{
		read_ADC();
  f8:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <read_ADC>
		leds_ADC();
  fc:	0e 94 42 02 	call	0x484	; 0x484 <leds_ADC>
		err=error();
 100:	0e 94 4a 01 	call	0x294	; 0x294 <error>
 104:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <err+0x1>
 108:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <err>
		int value= PID_calc();
 10c:	0e 94 94 01 	call	0x328	; 0x328 <PID_calc>
		PWM(V + value, V - value);
 110:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <V>
 114:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <V+0x1>
 118:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <V>
 11c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <V+0x1>
 120:	68 1b       	sub	r22, r24
 122:	79 0b       	sbc	r23, r25
 124:	82 0f       	add	r24, r18
 126:	93 1f       	adc	r25, r19
 128:	0e 94 c1 01 	call	0x382	; 0x382 <PWM>
 12c:	08 95       	ret
	}
	else
	{
		stop_engine();
 12e:	0e 94 bc 01 	call	0x378	; 0x378 <stop_engine>
 132:	08 95       	ret

00000134 <main>:

volatile int synch_timer = 0, start=0;

int main(void)
{
		init_all();
 134:	0e 94 72 00 	call	0xe4	; 0xe4 <init_all>
		USART_init();
 138:	0e 94 9a 02 	call	0x534	; 0x534 <USART_init>
		
		while(1)
		{
			if(synch_timer)
 13c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <synch_timer>
 140:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <synch_timer+0x1>
 144:	89 2b       	or	r24, r25
 146:	d1 f3       	breq	.-12     	; 0x13c <main+0x8>
			{
				synch_timer=0;
 148:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <synch_timer+0x1>
 14c:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <synch_timer>
				LF_loop(start);
 150:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
 154:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__data_end+0x1>
 158:	0e 94 7a 00 	call	0xf4	; 0xf4 <LF_loop>
 15c:	ef cf       	rjmp	.-34     	; 0x13c <main+0x8>

0000015e <__vector_10>:
		}
}


ISR(TIMER0_COMP_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
	synch_timer=1;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <synch_timer+0x1>
 174:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <synch_timer>
}
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <__vector_13>:

ISR(USART_RXC_vect)
{
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	char data;
	data = UDR;
 1a8:	8c b1       	in	r24, 0x0c	; 12
	UDR = data;
 1aa:	8c b9       	out	0x0c, r24	; 12
	
	switch(data)
 1ac:	83 33       	cpi	r24, 0x33	; 51
 1ae:	31 f1       	breq	.+76     	; 0x1fc <__vector_13+0x76>
 1b0:	28 f4       	brcc	.+10     	; 0x1bc <__vector_13+0x36>
 1b2:	81 33       	cpi	r24, 0x31	; 49
 1b4:	49 f0       	breq	.+18     	; 0x1c8 <__vector_13+0x42>
 1b6:	82 33       	cpi	r24, 0x32	; 50
 1b8:	91 f0       	breq	.+36     	; 0x1de <__vector_13+0x58>
 1ba:	5b c0       	rjmp	.+182    	; 0x272 <__vector_13+0xec>
 1bc:	84 33       	cpi	r24, 0x34	; 52
 1be:	91 f1       	breq	.+100    	; 0x224 <__vector_13+0x9e>
 1c0:	85 33       	cpi	r24, 0x35	; 53
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <__vector_13+0x40>
 1c4:	43 c0       	rjmp	.+134    	; 0x24c <__vector_13+0xc6>
 1c6:	55 c0       	rjmp	.+170    	; 0x272 <__vector_13+0xec>
	{
		case '1':
		start ^=1;
 1c8:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__data_end>
 1cc:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__data_end+0x1>
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	82 27       	eor	r24, r18
 1d4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__data_end+0x1>
 1d8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__data_end>
		break;
 1dc:	4a c0       	rjmp	.+148    	; 0x272 <__vector_13+0xec>
		
		case '2':
		calibration();
 1de:	0e 94 20 02 	call	0x440	; 0x440 <calibration>
		usart_put_string("\nSensors point: ");
 1e2:	86 e8       	ldi	r24, 0x86	; 134
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 ab 02 	call	0x556	; 0x556 <usart_put_string>
		usart_send_value(point);
 1ea:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <point>
 1ee:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <point+0x1>
 1f2:	0e 94 ba 02 	call	0x574	; 0x574 <usart_send_value>
		leds_effect();
 1f6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <leds_effect>
		break;
 1fa:	3b c0       	rjmp	.+118    	; 0x272 <__vector_13+0xec>
		
		case '3':
		kp+=1;
 1fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <kp>
 200:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <kp+0x1>
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <kp+0x1>
 20a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <kp>
		usart_put_string("\nKp: ");
 20e:	87 e9       	ldi	r24, 0x97	; 151
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 ab 02 	call	0x556	; 0x556 <usart_put_string>
		usart_send_value(kp);
 216:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <kp>
 21a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <kp+0x1>
 21e:	0e 94 ba 02 	call	0x574	; 0x574 <usart_send_value>
		break;
 222:	27 c0       	rjmp	.+78     	; 0x272 <__vector_13+0xec>
		
		case '4':
		kd+=1;
 224:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <kd>
 228:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <kd+0x1>
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <kd+0x1>
 232:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <kd>
		usart_put_string("\nKd: ");
 236:	8d e9       	ldi	r24, 0x9D	; 157
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 ab 02 	call	0x556	; 0x556 <usart_put_string>
		usart_send_value(kd);
 23e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <kd>
 242:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <kd+0x1>
 246:	0e 94 ba 02 	call	0x574	; 0x574 <usart_send_value>
		break;
 24a:	13 c0       	rjmp	.+38     	; 0x272 <__vector_13+0xec>
		
		case '5':
		V+=5;
 24c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <V>
 250:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <V+0x1>
 254:	05 96       	adiw	r24, 0x05	; 5
 256:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <V+0x1>
 25a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <V>
		usart_put_string("\nV: ");
 25e:	83 ea       	ldi	r24, 0xA3	; 163
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 ab 02 	call	0x556	; 0x556 <usart_put_string>
		usart_send_value(V);
 266:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <V>
 26a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <V+0x1>
 26e:	0e 94 ba 02 	call	0x574	; 0x574 <usart_send_value>
		break;
	}
	
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <error>:
volatile int V=100;

int e_last=0, err=0;

int error()
{
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	60 97       	sbiw	r28, 0x10	; 16
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
	int e=0;
	int e_last=0;
	int counter=0;
	int sensors_value[8]={-12,-8,-4,-1,1,4,8,12};
 2b0:	80 e1       	ldi	r24, 0x10	; 16
 2b2:	e6 e7       	ldi	r30, 0x76	; 118
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	de 01       	movw	r26, r28
 2b8:	11 96       	adiw	r26, 0x01	; 1
 2ba:	01 90       	ld	r0, Z+
 2bc:	0d 92       	st	X+, r0
 2be:	8a 95       	dec	r24
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <error+0x26>
 2c2:	e2 eb       	ldi	r30, 0xB2	; 178
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	de 01       	movw	r26, r28
 2c8:	11 96       	adiw	r26, 0x01	; 1
 2ca:	0f 2e       	mov	r0, r31
 2cc:	f2 ec       	ldi	r31, 0xC2	; 194
 2ce:	ef 2e       	mov	r14, r31
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	ff 2e       	mov	r15, r31
 2d4:	f0 2d       	mov	r31, r0

int error()
{
	int e=0;
	int e_last=0;
	int counter=0;
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	70 e0       	ldi	r23, 0x00	; 0

int e_last=0, err=0;

int error()
{
	int e=0;
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
	int counter=0;
	int sensors_value[8]={-12,-8,-4,-1,1,4,8,12};
		
	for (int i=0; i<8; i++)
	{
		e+=sensors[i]*sensors_value[i];		
 2de:	01 91       	ld	r16, Z+
 2e0:	11 91       	ld	r17, Z+
 2e2:	2d 91       	ld	r18, X+
 2e4:	3d 91       	ld	r19, X+
 2e6:	02 9f       	mul	r16, r18
 2e8:	a0 01       	movw	r20, r0
 2ea:	03 9f       	mul	r16, r19
 2ec:	50 0d       	add	r21, r0
 2ee:	12 9f       	mul	r17, r18
 2f0:	50 0d       	add	r21, r0
 2f2:	11 24       	eor	r1, r1
 2f4:	84 0f       	add	r24, r20
 2f6:	95 1f       	adc	r25, r21
		counter += sensors_value[i];		//how many sensors read line
 2f8:	62 0f       	add	r22, r18
 2fa:	73 1f       	adc	r23, r19
	int e=0;
	int e_last=0;
	int counter=0;
	int sensors_value[8]={-12,-8,-4,-1,1,4,8,12};
		
	for (int i=0; i<8; i++)
 2fc:	ee 15       	cp	r30, r14
 2fe:	ff 05       	cpc	r31, r15
 300:	71 f7       	brne	.-36     	; 0x2de <error+0x4a>
	{
		e+=sensors[i]*sensors_value[i];		
		counter += sensors_value[i];		//how many sensors read line
	}
	
	if(counter>0) 
 302:	16 16       	cp	r1, r22
 304:	17 06       	cpc	r1, r23
 306:	1c f4       	brge	.+6      	; 0x30e <error+0x7a>
	{
		e=e/counter;	//average error
 308:	0e 94 12 04 	call	0x824	; 0x824 <__divmodhi4>
 30c:	cb 01       	movw	r24, r22
		if(e_last>9) e=20;
		else if (e_last<-9) e=-20;
		else e_last=e;
	}
	return e;
}
 30e:	60 96       	adiw	r28, 0x10	; 16
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	f8 94       	cli
 314:	de bf       	out	0x3e, r29	; 62
 316:	0f be       	out	0x3f, r0	; 63
 318:	cd bf       	out	0x3d, r28	; 61
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	08 95       	ret

00000328 <PID_calc>:

int PID_calc()
{
	int u;
	int err_d;
	err_d=err-e_last;
 328:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <err>
 32c:	30 91 ad 00 	lds	r19, 0x00AD	; 0x8000ad <err+0x1>
 330:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <e_last>
 334:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <e_last+0x1>
 338:	f9 01       	movw	r30, r18
 33a:	e8 1b       	sub	r30, r24
 33c:	f9 0b       	sbc	r31, r25
	e_last = err;
 33e:	30 93 af 00 	sts	0x00AF, r19	; 0x8000af <e_last+0x1>
 342:	20 93 ae 00 	sts	0x00AE, r18	; 0x8000ae <e_last>
	u = kp*err + kd*err_d;
 346:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <kp>
 34a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <kp+0x1>
 34e:	60 91 b0 00 	lds	r22, 0x00B0	; 0x8000b0 <kd>
 352:	70 91 b1 00 	lds	r23, 0x00B1	; 0x8000b1 <kd+0x1>
	return u;
 356:	28 9f       	mul	r18, r24
 358:	a0 01       	movw	r20, r0
 35a:	29 9f       	mul	r18, r25
 35c:	50 0d       	add	r21, r0
 35e:	38 9f       	mul	r19, r24
 360:	50 0d       	add	r21, r0
 362:	11 24       	eor	r1, r1
 364:	e6 9f       	mul	r30, r22
 366:	c0 01       	movw	r24, r0
 368:	e7 9f       	mul	r30, r23
 36a:	90 0d       	add	r25, r0
 36c:	f6 9f       	mul	r31, r22
 36e:	90 0d       	add	r25, r0
 370:	11 24       	eor	r1, r1
 372:	84 0f       	add	r24, r20
 374:	95 1f       	adc	r25, r21
 376:	08 95       	ret

00000378 <stop_engine>:
#include <avr/io.h>


void stop_engine()
{
	E1_AIN=0;
 378:	93 98       	cbi	0x12, 3	; 18
	E1_BIN=0;
 37a:	92 98       	cbi	0x12, 2	; 18
	E2_AIN=0;
 37c:	96 98       	cbi	0x12, 6	; 18
	E2_BIN=0;
 37e:	97 98       	cbi	0x12, 7	; 18
 380:	08 95       	ret

00000382 <PWM>:
}

void PWM(int left, int right)
{
	if (left>=0)
 382:	99 23       	and	r25, r25
 384:	4c f0       	brlt	.+18     	; 0x398 <PWM+0x16>
 386:	8f 3f       	cpi	r24, 0xFF	; 255
 388:	91 05       	cpc	r25, r1
 38a:	19 f0       	breq	.+6      	; 0x392 <PWM+0x10>
 38c:	14 f0       	brlt	.+4      	; 0x392 <PWM+0x10>
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(left>255)left=255;
		E1_AIN=1;
 392:	93 9a       	sbi	0x12, 3	; 18
		E1_BIN=0;
 394:	92 98       	cbi	0x12, 2	; 18
 396:	08 c0       	rjmp	.+16     	; 0x3a8 <PWM+0x26>
	}
	else
	{
		if(left>-255)left=-255;
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	2f ef       	ldi	r18, 0xFF	; 255
 39c:	92 07       	cpc	r25, r18
 39e:	14 f0       	brlt	.+4      	; 0x3a4 <PWM+0x22>
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	9f ef       	ldi	r25, 0xFF	; 255
		E1_AIN=0;
 3a4:	93 98       	cbi	0x12, 3	; 18
		E1_BIN=1;
 3a6:	92 9a       	sbi	0x12, 2	; 18
	}
	if (right>=0)
 3a8:	77 23       	and	r23, r23
 3aa:	4c f0       	brlt	.+18     	; 0x3be <PWM+0x3c>
 3ac:	6f 3f       	cpi	r22, 0xFF	; 255
 3ae:	71 05       	cpc	r23, r1
 3b0:	19 f0       	breq	.+6      	; 0x3b8 <PWM+0x36>
 3b2:	14 f0       	brlt	.+4      	; 0x3b8 <PWM+0x36>
 3b4:	6f ef       	ldi	r22, 0xFF	; 255
 3b6:	70 e0       	ldi	r23, 0x00	; 0
	{
		if(right>255)right=255;
		E2_AIN=1;
 3b8:	96 9a       	sbi	0x12, 6	; 18
		E2_BIN=0;
 3ba:	97 98       	cbi	0x12, 7	; 18
 3bc:	08 c0       	rjmp	.+16     	; 0x3ce <PWM+0x4c>
	}
	else
	{
		if(right>-255)right=-255;
 3be:	62 30       	cpi	r22, 0x02	; 2
 3c0:	2f ef       	ldi	r18, 0xFF	; 255
 3c2:	72 07       	cpc	r23, r18
 3c4:	14 f0       	brlt	.+4      	; 0x3ca <PWM+0x48>
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	7f ef       	ldi	r23, 0xFF	; 255
		E2_AIN=0;
 3ca:	96 98       	cbi	0x12, 6	; 18
		E2_BIN=1;
 3cc:	97 9a       	sbi	0x12, 7	; 18
	}
	OCR1A=abs(left);
 3ce:	9c 01       	movw	r18, r24
 3d0:	99 23       	and	r25, r25
 3d2:	24 f4       	brge	.+8      	; 0x3dc <PWM+0x5a>
 3d4:	22 27       	eor	r18, r18
 3d6:	33 27       	eor	r19, r19
 3d8:	28 1b       	sub	r18, r24
 3da:	39 0b       	sbc	r19, r25
 3dc:	3b bd       	out	0x2b, r19	; 43
 3de:	2a bd       	out	0x2a, r18	; 42
	OCR1B=abs(right);
 3e0:	cb 01       	movw	r24, r22
 3e2:	99 23       	and	r25, r25
 3e4:	24 f4       	brge	.+8      	; 0x3ee <PWM+0x6c>
 3e6:	88 27       	eor	r24, r24
 3e8:	99 27       	eor	r25, r25
 3ea:	86 1b       	sub	r24, r22
 3ec:	97 0b       	sbc	r25, r23
 3ee:	99 bd       	out	0x29, r25	; 41
 3f0:	88 bd       	out	0x28, r24	; 40
 3f2:	08 95       	ret

000003f4 <read_ADC>:
int sensors[8];
int tab_sensors[8]={7,6,5,4,3,2,1,0};
volatile int point=150;

void read_ADC()
{
 3f4:	a6 e6       	ldi	r26, 0x66	; 102
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	e2 eb       	ldi	r30, 0xB2	; 178
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	42 ec       	ldi	r20, 0xC2	; 194
 3fe:	50 e0       	ldi	r21, 0x00	; 0
	{
		ADMUX &= 0b11100000; //zero mask
		ADMUX |= tab_sensors[i]; //input channel
		ADCSRA |= (1<<ADSC); //start conversion
		while (ADCSRA & (1<<ADSC)){}; //wait for stop conversion
		if (ADCH>point) sensors[i]=1;
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	70 e0       	ldi	r23, 0x00	; 0
void read_ADC()
{
	
	for (uint8_t i=0; i<8; i++)
	{
		ADMUX &= 0b11100000; //zero mask
 404:	87 b1       	in	r24, 0x07	; 7
 406:	80 7e       	andi	r24, 0xE0	; 224
 408:	87 b9       	out	0x07, r24	; 7
		ADMUX |= tab_sensors[i]; //input channel
 40a:	97 b1       	in	r25, 0x07	; 7
 40c:	8c 91       	ld	r24, X
 40e:	12 96       	adiw	r26, 0x02	; 2
 410:	89 2b       	or	r24, r25
 412:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC); //start conversion
 414:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & (1<<ADSC)){}; //wait for stop conversion
 416:	36 99       	sbic	0x06, 6	; 6
 418:	fe cf       	rjmp	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		if (ADCH>point) sensors[i]=1;
 41a:	85 b1       	in	r24, 0x05	; 5
 41c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <point>
 420:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <point+0x1>
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	28 17       	cp	r18, r24
 428:	39 07       	cpc	r19, r25
 42a:	1c f4       	brge	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42c:	71 83       	std	Z+1, r23	; 0x01
 42e:	60 83       	st	Z, r22
 430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		else sensors[i]=0;
 432:	11 82       	std	Z+1, r1	; 0x01
 434:	10 82       	st	Z, r1
 436:	32 96       	adiw	r30, 0x02	; 2
volatile int point=150;

void read_ADC()
{
	
	for (uint8_t i=0; i<8; i++)
 438:	e4 17       	cp	r30, r20
 43a:	f5 07       	cpc	r31, r21
 43c:	19 f7       	brne	.-58     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		ADCSRA |= (1<<ADSC); //start conversion
		while (ADCSRA & (1<<ADSC)){}; //wait for stop conversion
		if (ADCH>point) sensors[i]=1;
		else sensors[i]=0;
	}
}
 43e:	08 95       	ret

00000440 <calibration>:
void calibration()
{
	int firstCH; //ADC value of 0 channel
	int secondCH;
	
	ADMUX |= 0 & 0b11100000;	//0 channel ADC
 440:	87 b1       	in	r24, 0x07	; 7
 442:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 444:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC)){};
 446:	36 99       	sbic	0x06, 6	; 6
 448:	fe cf       	rjmp	.-4      	; 0x446 <calibration+0x6>
	firstCH=ADCH;
 44a:	65 b1       	in	r22, 0x05	; 5
 44c:	70 e0       	ldi	r23, 0x00	; 0
	
	ADMUX |= 1 & 0b11100000;	//1 channel ADC
 44e:	87 b1       	in	r24, 0x07	; 7
 450:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 452:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC)){};
 454:	36 99       	sbic	0x06, 6	; 6
 456:	fe cf       	rjmp	.-4      	; 0x454 <calibration+0x14>
	secondCH=ADCH;
 458:	85 b1       	in	r24, 0x05	; 5
	
	point = (firstCH+secondCH)/2.0;
 45a:	68 0f       	add	r22, r24
 45c:	71 1d       	adc	r23, r1
 45e:	07 2e       	mov	r0, r23
 460:	00 0c       	add	r0, r0
 462:	88 0b       	sbc	r24, r24
 464:	99 0b       	sbc	r25, r25
 466:	0e 94 19 03 	call	0x632	; 0x632 <__floatsisf>
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	5f e3       	ldi	r21, 0x3F	; 63
 472:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 476:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fixsfsi>
 47a:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <point+0x1>
 47e:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <point>
 482:	08 95       	ret

00000484 <leds_ADC>:
}

void leds_ADC()
{
	PORTB &= 0xF0;
 484:	88 b3       	in	r24, 0x18	; 24
 486:	80 7f       	andi	r24, 0xF0	; 240
 488:	88 bb       	out	0x18, r24	; 24
	PORTC &= 0x0F;
 48a:	85 b3       	in	r24, 0x15	; 21
 48c:	8f 70       	andi	r24, 0x0F	; 15
 48e:	85 bb       	out	0x15, r24	; 21
 490:	e2 eb       	ldi	r30, 0xB2	; 178
 492:	f0 e0       	ldi	r31, 0x00	; 0
	for (int i=0; i<8; i++)
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(i<4)
 498:	84 30       	cpi	r24, 0x04	; 4
 49a:	91 05       	cpc	r25, r1
 49c:	74 f4       	brge	.+28     	; 0x4ba <leds_ADC+0x36>
		{
			PORTC |= (sensors[i] << (i+4));
 49e:	65 b3       	in	r22, 0x15	; 21
 4a0:	20 81       	ld	r18, Z
 4a2:	31 81       	ldd	r19, Z+1	; 0x01
 4a4:	ac 01       	movw	r20, r24
 4a6:	4c 5f       	subi	r20, 0xFC	; 252
 4a8:	5f 4f       	sbci	r21, 0xFF	; 255
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <leds_ADC+0x2c>
 4ac:	22 0f       	add	r18, r18
 4ae:	33 1f       	adc	r19, r19
 4b0:	4a 95       	dec	r20
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <leds_ADC+0x28>
 4b4:	26 2b       	or	r18, r22
 4b6:	25 bb       	out	0x15, r18	; 21
 4b8:	0d c0       	rjmp	.+26     	; 0x4d4 <leds_ADC+0x50>
		}
		else
		{
			PORTB |= (sensors[i] << (i-4));
 4ba:	68 b3       	in	r22, 0x18	; 24
 4bc:	20 81       	ld	r18, Z
 4be:	31 81       	ldd	r19, Z+1	; 0x01
 4c0:	ac 01       	movw	r20, r24
 4c2:	44 50       	subi	r20, 0x04	; 4
 4c4:	51 09       	sbc	r21, r1
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <leds_ADC+0x48>
 4c8:	22 0f       	add	r18, r18
 4ca:	33 1f       	adc	r19, r19
 4cc:	4a 95       	dec	r20
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <leds_ADC+0x44>
 4d0:	26 2b       	or	r18, r22
 4d2:	28 bb       	out	0x18, r18	; 24

void leds_ADC()
{
	PORTB &= 0xF0;
	PORTC &= 0x0F;
	for (int i=0; i<8; i++)
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	32 96       	adiw	r30, 0x02	; 2
 4d8:	88 30       	cpi	r24, 0x08	; 8
 4da:	91 05       	cpc	r25, r1
 4dc:	e9 f6       	brne	.-70     	; 0x498 <leds_ADC+0x14>
		else
		{
			PORTB |= (sensors[i] << (i-4));
		}
	}
}
 4de:	08 95       	ret

000004e0 <leds_effect>:

void leds_effect()
{
	PORTB &= 0xF0;
 4e0:	88 b3       	in	r24, 0x18	; 24
 4e2:	80 7f       	andi	r24, 0xF0	; 240
 4e4:	88 bb       	out	0x18, r24	; 24
	PORTC &= 0x0F;
 4e6:	85 b3       	in	r24, 0x15	; 21
 4e8:	8f 70       	andi	r24, 0x0F	; 15
 4ea:	85 bb       	out	0x15, r24	; 21
 4ec:	23 e0       	ldi	r18, 0x03	; 3
 4ee:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0; i<3; i++)
	{
		PORTB |= 0x0F;
 4f0:	88 b3       	in	r24, 0x18	; 24
 4f2:	8f 60       	ori	r24, 0x0F	; 15
 4f4:	88 bb       	out	0x18, r24	; 24
		PORTC |= 0xF0;
 4f6:	85 b3       	in	r24, 0x15	; 21
 4f8:	80 6f       	ori	r24, 0xF0	; 240
 4fa:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fc:	4f ef       	ldi	r20, 0xFF	; 255
 4fe:	83 ec       	ldi	r24, 0xC3	; 195
 500:	99 e0       	ldi	r25, 0x09	; 9
 502:	41 50       	subi	r20, 0x01	; 1
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	90 40       	sbci	r25, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <leds_effect+0x22>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <leds_effect+0x2c>
 50c:	00 00       	nop
		_delay_ms(200);
		PORTB &= 0xF0;
 50e:	88 b3       	in	r24, 0x18	; 24
 510:	80 7f       	andi	r24, 0xF0	; 240
 512:	88 bb       	out	0x18, r24	; 24
		PORTC &= 0x0F;
 514:	85 b3       	in	r24, 0x15	; 21
 516:	8f 70       	andi	r24, 0x0F	; 15
 518:	85 bb       	out	0x15, r24	; 21
 51a:	4f ef       	ldi	r20, 0xFF	; 255
 51c:	83 ec       	ldi	r24, 0xC3	; 195
 51e:	99 e0       	ldi	r25, 0x09	; 9
 520:	41 50       	subi	r20, 0x01	; 1
 522:	80 40       	sbci	r24, 0x00	; 0
 524:	90 40       	sbci	r25, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <leds_effect+0x40>
 528:	00 c0       	rjmp	.+0      	; 0x52a <leds_effect+0x4a>
 52a:	00 00       	nop
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	31 09       	sbc	r19, r1

void leds_effect()
{
	PORTB &= 0xF0;
	PORTC &= 0x0F;
	for(int i=0; i<3; i++)
 530:	f9 f6       	brne	.-66     	; 0x4f0 <leds_effect+0x10>
		_delay_ms(200);
		PORTB &= 0xF0;
		PORTC &= 0x0F;
		_delay_ms(200);
		}
 532:	08 95       	ret

00000534 <USART_init>:
#define USART_BAUDRATE 9600
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void USART_init()
{
	UCSRB |= (1<<RXEN) | (1<<TXEN) | (1<<RXCIE); //receiver, transmitter, rx interrupt enable
 534:	8a b1       	in	r24, 0x0a	; 10
 536:	88 69       	ori	r24, 0x98	; 152
 538:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0); //data 8bit
 53a:	80 b5       	in	r24, 0x20	; 32
 53c:	86 68       	ori	r24, 0x86	; 134
 53e:	80 bd       	out	0x20, r24	; 32
	UBRRL = BAUD_PRESCALE;
 540:	87 e6       	ldi	r24, 0x67	; 103
 542:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE>>8);
 544:	10 bc       	out	0x20, r1	; 32
 546:	08 95       	ret

00000548 <usar_put_char>:
}

void usar_put_char(unsigned char c)
{
	while(!(UCSRA &= (1<<UDRE))){}; //wait for empty buffer
 548:	9b b1       	in	r25, 0x0b	; 11
 54a:	90 72       	andi	r25, 0x20	; 32
 54c:	9b b9       	out	0x0b, r25	; 11
 54e:	99 23       	and	r25, r25
 550:	d9 f3       	breq	.-10     	; 0x548 <usar_put_char>
	UDR=c;
 552:	8c b9       	out	0x0c, r24	; 12
 554:	08 95       	ret

00000556 <usart_put_string>:
}

void usart_put_string(char *pointer)
{
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	ec 01       	movw	r28, r24
	while (*pointer != 0x00)
 55c:	88 81       	ld	r24, Y
 55e:	88 23       	and	r24, r24
 560:	31 f0       	breq	.+12     	; 0x56e <usart_put_string+0x18>
 562:	21 96       	adiw	r28, 0x01	; 1
	{
		usar_put_char(*pointer);
 564:	0e 94 a4 02 	call	0x548	; 0x548 <usar_put_char>
	UDR=c;
}

void usart_put_string(char *pointer)
{
	while (*pointer != 0x00)
 568:	89 91       	ld	r24, Y+
 56a:	81 11       	cpse	r24, r1
 56c:	fb cf       	rjmp	.-10     	; 0x564 <usart_put_string+0xe>
	{
		usar_put_char(*pointer);
		pointer++;
	}
}
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <usart_send_value>:

void usart_send_value(int value)
{
 574:	0f 93       	push	r16
 576:	1f 93       	push	r17
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	2a 97       	sbiw	r28, 0x0a	; 10
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	de bf       	out	0x3e, r29	; 62
 588:	0f be       	out	0x3f, r0	; 63
 58a:	cd bf       	out	0x3d, r28	; 61
	char buffor[10];
	itoa(value,buffor,10);
 58c:	4a e0       	ldi	r20, 0x0A	; 10
 58e:	50 e0       	ldi	r21, 0x00	; 0
 590:	8e 01       	movw	r16, r28
 592:	0f 5f       	subi	r16, 0xFF	; 255
 594:	1f 4f       	sbci	r17, 0xFF	; 255
 596:	b8 01       	movw	r22, r16
 598:	0e 94 41 04 	call	0x882	; 0x882 <itoa>
	usar_put_char(buffor);
 59c:	80 2f       	mov	r24, r16
 59e:	0e 94 a4 02 	call	0x548	; 0x548 <usar_put_char>
	strcpy(buffor,' ');
 5a2:	60 e2       	ldi	r22, 0x20	; 32
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	c8 01       	movw	r24, r16
 5a8:	0e 94 3a 04 	call	0x874	; 0x874 <strcpy>
 5ac:	2a 96       	adiw	r28, 0x0a	; 10
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	f8 94       	cli
 5b2:	de bf       	out	0x3e, r29	; 62
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	cd bf       	out	0x3d, r28	; 61
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	08 95       	ret

000005c2 <__fixsfsi>:
 5c2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__fixunssfsi>
 5c6:	68 94       	set
 5c8:	b1 11       	cpse	r27, r1
 5ca:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_szero>
 5ce:	08 95       	ret

000005d0 <__fixunssfsi>:
 5d0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__fp_splitA>
 5d4:	88 f0       	brcs	.+34     	; 0x5f8 <__fixunssfsi+0x28>
 5d6:	9f 57       	subi	r25, 0x7F	; 127
 5d8:	98 f0       	brcs	.+38     	; 0x600 <__fixunssfsi+0x30>
 5da:	b9 2f       	mov	r27, r25
 5dc:	99 27       	eor	r25, r25
 5de:	b7 51       	subi	r27, 0x17	; 23
 5e0:	b0 f0       	brcs	.+44     	; 0x60e <__fixunssfsi+0x3e>
 5e2:	e1 f0       	breq	.+56     	; 0x61c <__fixunssfsi+0x4c>
 5e4:	66 0f       	add	r22, r22
 5e6:	77 1f       	adc	r23, r23
 5e8:	88 1f       	adc	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	1a f0       	brmi	.+6      	; 0x5f4 <__fixunssfsi+0x24>
 5ee:	ba 95       	dec	r27
 5f0:	c9 f7       	brne	.-14     	; 0x5e4 <__fixunssfsi+0x14>
 5f2:	14 c0       	rjmp	.+40     	; 0x61c <__fixunssfsi+0x4c>
 5f4:	b1 30       	cpi	r27, 0x01	; 1
 5f6:	91 f0       	breq	.+36     	; 0x61c <__fixunssfsi+0x4c>
 5f8:	0e 94 76 03 	call	0x6ec	; 0x6ec <__fp_zero>
 5fc:	b1 e0       	ldi	r27, 0x01	; 1
 5fe:	08 95       	ret
 600:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__fp_zero>
 604:	67 2f       	mov	r22, r23
 606:	78 2f       	mov	r23, r24
 608:	88 27       	eor	r24, r24
 60a:	b8 5f       	subi	r27, 0xF8	; 248
 60c:	39 f0       	breq	.+14     	; 0x61c <__fixunssfsi+0x4c>
 60e:	b9 3f       	cpi	r27, 0xF9	; 249
 610:	cc f3       	brlt	.-14     	; 0x604 <__fixunssfsi+0x34>
 612:	86 95       	lsr	r24
 614:	77 95       	ror	r23
 616:	67 95       	ror	r22
 618:	b3 95       	inc	r27
 61a:	d9 f7       	brne	.-10     	; 0x612 <__fixunssfsi+0x42>
 61c:	3e f4       	brtc	.+14     	; 0x62c <__fixunssfsi+0x5c>
 61e:	90 95       	com	r25
 620:	80 95       	com	r24
 622:	70 95       	com	r23
 624:	61 95       	neg	r22
 626:	7f 4f       	sbci	r23, 0xFF	; 255
 628:	8f 4f       	sbci	r24, 0xFF	; 255
 62a:	9f 4f       	sbci	r25, 0xFF	; 255
 62c:	08 95       	ret

0000062e <__floatunsisf>:
 62e:	e8 94       	clt
 630:	09 c0       	rjmp	.+18     	; 0x644 <__floatsisf+0x12>

00000632 <__floatsisf>:
 632:	97 fb       	bst	r25, 7
 634:	3e f4       	brtc	.+14     	; 0x644 <__floatsisf+0x12>
 636:	90 95       	com	r25
 638:	80 95       	com	r24
 63a:	70 95       	com	r23
 63c:	61 95       	neg	r22
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	8f 4f       	sbci	r24, 0xFF	; 255
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	99 23       	and	r25, r25
 646:	a9 f0       	breq	.+42     	; 0x672 <__floatsisf+0x40>
 648:	f9 2f       	mov	r31, r25
 64a:	96 e9       	ldi	r25, 0x96	; 150
 64c:	bb 27       	eor	r27, r27
 64e:	93 95       	inc	r25
 650:	f6 95       	lsr	r31
 652:	87 95       	ror	r24
 654:	77 95       	ror	r23
 656:	67 95       	ror	r22
 658:	b7 95       	ror	r27
 65a:	f1 11       	cpse	r31, r1
 65c:	f8 cf       	rjmp	.-16     	; 0x64e <__floatsisf+0x1c>
 65e:	fa f4       	brpl	.+62     	; 0x69e <__floatsisf+0x6c>
 660:	bb 0f       	add	r27, r27
 662:	11 f4       	brne	.+4      	; 0x668 <__floatsisf+0x36>
 664:	60 ff       	sbrs	r22, 0
 666:	1b c0       	rjmp	.+54     	; 0x69e <__floatsisf+0x6c>
 668:	6f 5f       	subi	r22, 0xFF	; 255
 66a:	7f 4f       	sbci	r23, 0xFF	; 255
 66c:	8f 4f       	sbci	r24, 0xFF	; 255
 66e:	9f 4f       	sbci	r25, 0xFF	; 255
 670:	16 c0       	rjmp	.+44     	; 0x69e <__floatsisf+0x6c>
 672:	88 23       	and	r24, r24
 674:	11 f0       	breq	.+4      	; 0x67a <__floatsisf+0x48>
 676:	96 e9       	ldi	r25, 0x96	; 150
 678:	11 c0       	rjmp	.+34     	; 0x69c <__floatsisf+0x6a>
 67a:	77 23       	and	r23, r23
 67c:	21 f0       	breq	.+8      	; 0x686 <__floatsisf+0x54>
 67e:	9e e8       	ldi	r25, 0x8E	; 142
 680:	87 2f       	mov	r24, r23
 682:	76 2f       	mov	r23, r22
 684:	05 c0       	rjmp	.+10     	; 0x690 <__floatsisf+0x5e>
 686:	66 23       	and	r22, r22
 688:	71 f0       	breq	.+28     	; 0x6a6 <__floatsisf+0x74>
 68a:	96 e8       	ldi	r25, 0x86	; 134
 68c:	86 2f       	mov	r24, r22
 68e:	70 e0       	ldi	r23, 0x00	; 0
 690:	60 e0       	ldi	r22, 0x00	; 0
 692:	2a f0       	brmi	.+10     	; 0x69e <__floatsisf+0x6c>
 694:	9a 95       	dec	r25
 696:	66 0f       	add	r22, r22
 698:	77 1f       	adc	r23, r23
 69a:	88 1f       	adc	r24, r24
 69c:	da f7       	brpl	.-10     	; 0x694 <__floatsisf+0x62>
 69e:	88 0f       	add	r24, r24
 6a0:	96 95       	lsr	r25
 6a2:	87 95       	ror	r24
 6a4:	97 f9       	bld	r25, 7
 6a6:	08 95       	ret

000006a8 <__fp_split3>:
 6a8:	57 fd       	sbrc	r21, 7
 6aa:	90 58       	subi	r25, 0x80	; 128
 6ac:	44 0f       	add	r20, r20
 6ae:	55 1f       	adc	r21, r21
 6b0:	59 f0       	breq	.+22     	; 0x6c8 <__fp_splitA+0x10>
 6b2:	5f 3f       	cpi	r21, 0xFF	; 255
 6b4:	71 f0       	breq	.+28     	; 0x6d2 <__fp_splitA+0x1a>
 6b6:	47 95       	ror	r20

000006b8 <__fp_splitA>:
 6b8:	88 0f       	add	r24, r24
 6ba:	97 fb       	bst	r25, 7
 6bc:	99 1f       	adc	r25, r25
 6be:	61 f0       	breq	.+24     	; 0x6d8 <__fp_splitA+0x20>
 6c0:	9f 3f       	cpi	r25, 0xFF	; 255
 6c2:	79 f0       	breq	.+30     	; 0x6e2 <__fp_splitA+0x2a>
 6c4:	87 95       	ror	r24
 6c6:	08 95       	ret
 6c8:	12 16       	cp	r1, r18
 6ca:	13 06       	cpc	r1, r19
 6cc:	14 06       	cpc	r1, r20
 6ce:	55 1f       	adc	r21, r21
 6d0:	f2 cf       	rjmp	.-28     	; 0x6b6 <__fp_split3+0xe>
 6d2:	46 95       	lsr	r20
 6d4:	f1 df       	rcall	.-30     	; 0x6b8 <__fp_splitA>
 6d6:	08 c0       	rjmp	.+16     	; 0x6e8 <__fp_splitA+0x30>
 6d8:	16 16       	cp	r1, r22
 6da:	17 06       	cpc	r1, r23
 6dc:	18 06       	cpc	r1, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	f1 cf       	rjmp	.-30     	; 0x6c4 <__fp_splitA+0xc>
 6e2:	86 95       	lsr	r24
 6e4:	71 05       	cpc	r23, r1
 6e6:	61 05       	cpc	r22, r1
 6e8:	08 94       	sec
 6ea:	08 95       	ret

000006ec <__fp_zero>:
 6ec:	e8 94       	clt

000006ee <__fp_szero>:
 6ee:	bb 27       	eor	r27, r27
 6f0:	66 27       	eor	r22, r22
 6f2:	77 27       	eor	r23, r23
 6f4:	cb 01       	movw	r24, r22
 6f6:	97 f9       	bld	r25, 7
 6f8:	08 95       	ret

000006fa <__mulsf3>:
 6fa:	0e 94 90 03 	call	0x720	; 0x720 <__mulsf3x>
 6fe:	0c 94 01 04 	jmp	0x802	; 0x802 <__fp_round>
 702:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__fp_pscA>
 706:	38 f0       	brcs	.+14     	; 0x716 <__mulsf3+0x1c>
 708:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_pscB>
 70c:	20 f0       	brcs	.+8      	; 0x716 <__mulsf3+0x1c>
 70e:	95 23       	and	r25, r21
 710:	11 f0       	breq	.+4      	; 0x716 <__mulsf3+0x1c>
 712:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_inf>
 716:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_nan>
 71a:	11 24       	eor	r1, r1
 71c:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_szero>

00000720 <__mulsf3x>:
 720:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fp_split3>
 724:	70 f3       	brcs	.-36     	; 0x702 <__mulsf3+0x8>

00000726 <__mulsf3_pse>:
 726:	95 9f       	mul	r25, r21
 728:	c1 f3       	breq	.-16     	; 0x71a <__mulsf3+0x20>
 72a:	95 0f       	add	r25, r21
 72c:	50 e0       	ldi	r21, 0x00	; 0
 72e:	55 1f       	adc	r21, r21
 730:	62 9f       	mul	r22, r18
 732:	f0 01       	movw	r30, r0
 734:	72 9f       	mul	r23, r18
 736:	bb 27       	eor	r27, r27
 738:	f0 0d       	add	r31, r0
 73a:	b1 1d       	adc	r27, r1
 73c:	63 9f       	mul	r22, r19
 73e:	aa 27       	eor	r26, r26
 740:	f0 0d       	add	r31, r0
 742:	b1 1d       	adc	r27, r1
 744:	aa 1f       	adc	r26, r26
 746:	64 9f       	mul	r22, r20
 748:	66 27       	eor	r22, r22
 74a:	b0 0d       	add	r27, r0
 74c:	a1 1d       	adc	r26, r1
 74e:	66 1f       	adc	r22, r22
 750:	82 9f       	mul	r24, r18
 752:	22 27       	eor	r18, r18
 754:	b0 0d       	add	r27, r0
 756:	a1 1d       	adc	r26, r1
 758:	62 1f       	adc	r22, r18
 75a:	73 9f       	mul	r23, r19
 75c:	b0 0d       	add	r27, r0
 75e:	a1 1d       	adc	r26, r1
 760:	62 1f       	adc	r22, r18
 762:	83 9f       	mul	r24, r19
 764:	a0 0d       	add	r26, r0
 766:	61 1d       	adc	r22, r1
 768:	22 1f       	adc	r18, r18
 76a:	74 9f       	mul	r23, r20
 76c:	33 27       	eor	r19, r19
 76e:	a0 0d       	add	r26, r0
 770:	61 1d       	adc	r22, r1
 772:	23 1f       	adc	r18, r19
 774:	84 9f       	mul	r24, r20
 776:	60 0d       	add	r22, r0
 778:	21 1d       	adc	r18, r1
 77a:	82 2f       	mov	r24, r18
 77c:	76 2f       	mov	r23, r22
 77e:	6a 2f       	mov	r22, r26
 780:	11 24       	eor	r1, r1
 782:	9f 57       	subi	r25, 0x7F	; 127
 784:	50 40       	sbci	r21, 0x00	; 0
 786:	9a f0       	brmi	.+38     	; 0x7ae <__mulsf3_pse+0x88>
 788:	f1 f0       	breq	.+60     	; 0x7c6 <__mulsf3_pse+0xa0>
 78a:	88 23       	and	r24, r24
 78c:	4a f0       	brmi	.+18     	; 0x7a0 <__mulsf3_pse+0x7a>
 78e:	ee 0f       	add	r30, r30
 790:	ff 1f       	adc	r31, r31
 792:	bb 1f       	adc	r27, r27
 794:	66 1f       	adc	r22, r22
 796:	77 1f       	adc	r23, r23
 798:	88 1f       	adc	r24, r24
 79a:	91 50       	subi	r25, 0x01	; 1
 79c:	50 40       	sbci	r21, 0x00	; 0
 79e:	a9 f7       	brne	.-22     	; 0x78a <__mulsf3_pse+0x64>
 7a0:	9e 3f       	cpi	r25, 0xFE	; 254
 7a2:	51 05       	cpc	r21, r1
 7a4:	80 f0       	brcs	.+32     	; 0x7c6 <__mulsf3_pse+0xa0>
 7a6:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_inf>
 7aa:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__fp_szero>
 7ae:	5f 3f       	cpi	r21, 0xFF	; 255
 7b0:	e4 f3       	brlt	.-8      	; 0x7aa <__mulsf3_pse+0x84>
 7b2:	98 3e       	cpi	r25, 0xE8	; 232
 7b4:	d4 f3       	brlt	.-12     	; 0x7aa <__mulsf3_pse+0x84>
 7b6:	86 95       	lsr	r24
 7b8:	77 95       	ror	r23
 7ba:	67 95       	ror	r22
 7bc:	b7 95       	ror	r27
 7be:	f7 95       	ror	r31
 7c0:	e7 95       	ror	r30
 7c2:	9f 5f       	subi	r25, 0xFF	; 255
 7c4:	c1 f7       	brne	.-16     	; 0x7b6 <__mulsf3_pse+0x90>
 7c6:	fe 2b       	or	r31, r30
 7c8:	88 0f       	add	r24, r24
 7ca:	91 1d       	adc	r25, r1
 7cc:	96 95       	lsr	r25
 7ce:	87 95       	ror	r24
 7d0:	97 f9       	bld	r25, 7
 7d2:	08 95       	ret

000007d4 <__fp_inf>:
 7d4:	97 f9       	bld	r25, 7
 7d6:	9f 67       	ori	r25, 0x7F	; 127
 7d8:	80 e8       	ldi	r24, 0x80	; 128
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	08 95       	ret

000007e0 <__fp_nan>:
 7e0:	9f ef       	ldi	r25, 0xFF	; 255
 7e2:	80 ec       	ldi	r24, 0xC0	; 192
 7e4:	08 95       	ret

000007e6 <__fp_pscA>:
 7e6:	00 24       	eor	r0, r0
 7e8:	0a 94       	dec	r0
 7ea:	16 16       	cp	r1, r22
 7ec:	17 06       	cpc	r1, r23
 7ee:	18 06       	cpc	r1, r24
 7f0:	09 06       	cpc	r0, r25
 7f2:	08 95       	ret

000007f4 <__fp_pscB>:
 7f4:	00 24       	eor	r0, r0
 7f6:	0a 94       	dec	r0
 7f8:	12 16       	cp	r1, r18
 7fa:	13 06       	cpc	r1, r19
 7fc:	14 06       	cpc	r1, r20
 7fe:	05 06       	cpc	r0, r21
 800:	08 95       	ret

00000802 <__fp_round>:
 802:	09 2e       	mov	r0, r25
 804:	03 94       	inc	r0
 806:	00 0c       	add	r0, r0
 808:	11 f4       	brne	.+4      	; 0x80e <__fp_round+0xc>
 80a:	88 23       	and	r24, r24
 80c:	52 f0       	brmi	.+20     	; 0x822 <__fp_round+0x20>
 80e:	bb 0f       	add	r27, r27
 810:	40 f4       	brcc	.+16     	; 0x822 <__fp_round+0x20>
 812:	bf 2b       	or	r27, r31
 814:	11 f4       	brne	.+4      	; 0x81a <__fp_round+0x18>
 816:	60 ff       	sbrs	r22, 0
 818:	04 c0       	rjmp	.+8      	; 0x822 <__fp_round+0x20>
 81a:	6f 5f       	subi	r22, 0xFF	; 255
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	8f 4f       	sbci	r24, 0xFF	; 255
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	08 95       	ret

00000824 <__divmodhi4>:
 824:	97 fb       	bst	r25, 7
 826:	07 2e       	mov	r0, r23
 828:	16 f4       	brtc	.+4      	; 0x82e <__divmodhi4+0xa>
 82a:	00 94       	com	r0
 82c:	07 d0       	rcall	.+14     	; 0x83c <__divmodhi4_neg1>
 82e:	77 fd       	sbrc	r23, 7
 830:	09 d0       	rcall	.+18     	; 0x844 <__divmodhi4_neg2>
 832:	0e 94 26 04 	call	0x84c	; 0x84c <__udivmodhi4>
 836:	07 fc       	sbrc	r0, 7
 838:	05 d0       	rcall	.+10     	; 0x844 <__divmodhi4_neg2>
 83a:	3e f4       	brtc	.+14     	; 0x84a <__divmodhi4_exit>

0000083c <__divmodhi4_neg1>:
 83c:	90 95       	com	r25
 83e:	81 95       	neg	r24
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	08 95       	ret

00000844 <__divmodhi4_neg2>:
 844:	70 95       	com	r23
 846:	61 95       	neg	r22
 848:	7f 4f       	sbci	r23, 0xFF	; 255

0000084a <__divmodhi4_exit>:
 84a:	08 95       	ret

0000084c <__udivmodhi4>:
 84c:	aa 1b       	sub	r26, r26
 84e:	bb 1b       	sub	r27, r27
 850:	51 e1       	ldi	r21, 0x11	; 17
 852:	07 c0       	rjmp	.+14     	; 0x862 <__udivmodhi4_ep>

00000854 <__udivmodhi4_loop>:
 854:	aa 1f       	adc	r26, r26
 856:	bb 1f       	adc	r27, r27
 858:	a6 17       	cp	r26, r22
 85a:	b7 07       	cpc	r27, r23
 85c:	10 f0       	brcs	.+4      	; 0x862 <__udivmodhi4_ep>
 85e:	a6 1b       	sub	r26, r22
 860:	b7 0b       	sbc	r27, r23

00000862 <__udivmodhi4_ep>:
 862:	88 1f       	adc	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	5a 95       	dec	r21
 868:	a9 f7       	brne	.-22     	; 0x854 <__udivmodhi4_loop>
 86a:	80 95       	com	r24
 86c:	90 95       	com	r25
 86e:	bc 01       	movw	r22, r24
 870:	cd 01       	movw	r24, r26
 872:	08 95       	ret

00000874 <strcpy>:
 874:	fb 01       	movw	r30, r22
 876:	dc 01       	movw	r26, r24
 878:	01 90       	ld	r0, Z+
 87a:	0d 92       	st	X+, r0
 87c:	00 20       	and	r0, r0
 87e:	e1 f7       	brne	.-8      	; 0x878 <strcpy+0x4>
 880:	08 95       	ret

00000882 <itoa>:
 882:	45 32       	cpi	r20, 0x25	; 37
 884:	51 05       	cpc	r21, r1
 886:	20 f4       	brcc	.+8      	; 0x890 <itoa+0xe>
 888:	42 30       	cpi	r20, 0x02	; 2
 88a:	10 f0       	brcs	.+4      	; 0x890 <itoa+0xe>
 88c:	0c 94 4c 04 	jmp	0x898	; 0x898 <__itoa_ncheck>
 890:	fb 01       	movw	r30, r22
 892:	10 82       	st	Z, r1
 894:	cb 01       	movw	r24, r22
 896:	08 95       	ret

00000898 <__itoa_ncheck>:
 898:	bb 27       	eor	r27, r27
 89a:	4a 30       	cpi	r20, 0x0A	; 10
 89c:	31 f4       	brne	.+12     	; 0x8aa <__itoa_ncheck+0x12>
 89e:	99 23       	and	r25, r25
 8a0:	22 f4       	brpl	.+8      	; 0x8aa <__itoa_ncheck+0x12>
 8a2:	bd e2       	ldi	r27, 0x2D	; 45
 8a4:	90 95       	com	r25
 8a6:	81 95       	neg	r24
 8a8:	9f 4f       	sbci	r25, 0xFF	; 255
 8aa:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__utoa_common>

000008ae <__utoa_ncheck>:
 8ae:	bb 27       	eor	r27, r27

000008b0 <__utoa_common>:
 8b0:	fb 01       	movw	r30, r22
 8b2:	55 27       	eor	r21, r21
 8b4:	aa 27       	eor	r26, r26
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	aa 1f       	adc	r26, r26
 8bc:	a4 17       	cp	r26, r20
 8be:	10 f0       	brcs	.+4      	; 0x8c4 <__utoa_common+0x14>
 8c0:	a4 1b       	sub	r26, r20
 8c2:	83 95       	inc	r24
 8c4:	50 51       	subi	r21, 0x10	; 16
 8c6:	b9 f7       	brne	.-18     	; 0x8b6 <__utoa_common+0x6>
 8c8:	a0 5d       	subi	r26, 0xD0	; 208
 8ca:	aa 33       	cpi	r26, 0x3A	; 58
 8cc:	08 f0       	brcs	.+2      	; 0x8d0 <__utoa_common+0x20>
 8ce:	a9 5d       	subi	r26, 0xD9	; 217
 8d0:	a1 93       	st	Z+, r26
 8d2:	00 97       	sbiw	r24, 0x00	; 0
 8d4:	79 f7       	brne	.-34     	; 0x8b4 <__utoa_common+0x4>
 8d6:	b1 11       	cpse	r27, r1
 8d8:	b1 93       	st	Z+, r27
 8da:	11 92       	st	Z+, r1
 8dc:	cb 01       	movw	r24, r22
 8de:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <strrev>

000008e2 <strrev>:
 8e2:	dc 01       	movw	r26, r24
 8e4:	fc 01       	movw	r30, r24
 8e6:	67 2f       	mov	r22, r23
 8e8:	71 91       	ld	r23, Z+
 8ea:	77 23       	and	r23, r23
 8ec:	e1 f7       	brne	.-8      	; 0x8e6 <strrev+0x4>
 8ee:	32 97       	sbiw	r30, 0x02	; 2
 8f0:	04 c0       	rjmp	.+8      	; 0x8fa <strrev+0x18>
 8f2:	7c 91       	ld	r23, X
 8f4:	6d 93       	st	X+, r22
 8f6:	70 83       	st	Z, r23
 8f8:	62 91       	ld	r22, -Z
 8fa:	ae 17       	cp	r26, r30
 8fc:	bf 07       	cpc	r27, r31
 8fe:	c8 f3       	brcs	.-14     	; 0x8f2 <strrev+0x10>
 900:	08 95       	ret

00000902 <_exit>:
 902:	f8 94       	cli

00000904 <__stop_program>:
 904:	ff cf       	rjmp	.-2      	; 0x904 <__stop_program>
